
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002194  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002194  00002228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007c  0080007c  00002244  2**0
                  ALLOC
  3 .stab         0000264c  00000000  00000000  00002244  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013b4  00000000  00000000  00004890  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000097d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009938  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a393  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e9       	ldi	r30, 0x94	; 148
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 09 	call	0x1202	; 0x1202 <main>
      8a:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ad 10 	jmp	0x215a	; 0x215a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 91 10 	jmp	0x2122	; 0x2122 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ad 10 	jmp	0x215a	; 0x215a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b9 10 	jmp	0x2172	; 0x2172 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a1 10 	jmp	0x2142	; 0x2142 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 bd 10 	jmp	0x217a	; 0x217a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 * Description : Function to initialize the buzzer driver
 * 	1. Set the buzzer pin as an output pin
 * 	2. Turn off the buzzer
 */
void Buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*set the buzzer pin as an output pin */
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN, PIN_OUTPUT);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>

	/* initially, Turn off the buzzer */
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_LOW);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:

/*
 * Description: Function to enable the buzzer
 */
void Buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_HIGH);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:

/*
 * Description: Function to disable the buzzer
 */
void Buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_LOW);
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <CONTROL_TIMER1_count1>:

/* Description:
 * rotate the motor to open close the door or stop it
 */
void CONTROL_TIMER1_count1(void)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <CONTROL_TIMER1_count1+0x6>
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
	/* increment sec1 when timer is fired and ISR is called  */
	sec1++;
     ba2:	80 91 7c 00 	lds	r24, 0x007C
     ba6:	8f 5f       	subi	r24, 0xFF	; 255
     ba8:	80 93 7c 00 	sts	0x007C, r24

	/* rotate the motor or stop it according to the time passed */
	switch (sec1)
     bac:	80 91 7c 00 	lds	r24, 0x007C
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	3a 83       	std	Y+2, r19	; 0x02
     bb6:	29 83       	std	Y+1, r18	; 0x01
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
     bbc:	82 31       	cpi	r24, 0x12	; 18
     bbe:	91 05       	cpc	r25, r1
     bc0:	79 f0       	breq	.+30     	; 0xbe0 <CONTROL_TIMER1_count1+0x48>
     bc2:	29 81       	ldd	r18, Y+1	; 0x01
     bc4:	3a 81       	ldd	r19, Y+2	; 0x02
     bc6:	21 32       	cpi	r18, 0x21	; 33
     bc8:	31 05       	cpc	r19, r1
     bca:	79 f0       	breq	.+30     	; 0xbea <CONTROL_TIMER1_count1+0x52>
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	8f 30       	cpi	r24, 0x0F	; 15
     bd2:	91 05       	cpc	r25, r1
     bd4:	81 f4       	brne	.+32     	; 0xbf6 <CONTROL_TIMER1_count1+0x5e>
	{
	case 15:
		DcMotor_Rotate(STOP,0);
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	60 e0       	ldi	r22, 0x00	; 0
     bda:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DcMotor_Rotate>
     bde:	0b c0       	rjmp	.+22     	; 0xbf6 <CONTROL_TIMER1_count1+0x5e>
		break;
	case 18:
		DcMotor_Rotate(ACW,100);
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	64 e6       	ldi	r22, 0x64	; 100
     be4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DcMotor_Rotate>
     be8:	06 c0       	rjmp	.+12     	; 0xbf6 <CONTROL_TIMER1_count1+0x5e>
		break;
	case 33:
		DcMotor_Rotate(STOP,0);
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DcMotor_Rotate>
		Timer1_deInit();
     bf2:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <Timer1_deInit>
		break;
	}
}
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	cf 91       	pop	r28
     bfc:	df 91       	pop	r29
     bfe:	08 95       	ret

00000c00 <CONTROL_TIMER1_count2>:
/* Description:
 * count seconds for the error function
 */
void CONTROL_TIMER1_count2(void)
{
     c00:	df 93       	push	r29
     c02:	cf 93       	push	r28
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
	/* increment sec2 when timer is fired and ISR is called  */
	sec2++;
     c08:	80 91 7d 00 	lds	r24, 0x007D
     c0c:	8f 5f       	subi	r24, 0xFF	; 255
     c0e:	80 93 7d 00 	sts	0x007D, r24
}
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <CONTROL_sendState>:
 *******************************************************************************/
/* Description:
 * function to send a byte to the HMI ECU
 */
void CONTROL_sendState (uint8 a_status)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	0f 92       	push	r0
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	89 83       	std	Y+1, r24	; 0x01
	/* Wait until HMI_ECU is ready to receive the string */
	while(UART_receiveByte() != HMI_ECU_READY){}
     c24:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <UART_receiveByte>
     c28:	88 34       	cpi	r24, 0x48	; 72
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <CONTROL_sendState+0xc>

	/* Send the required string to HMI_ECU through UART */
	UART_sendByte(a_status);
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <UART_sendByte>
}
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <CONTROL_receiveState>:

/* Description:
 * function to receive a byte from the HMI ECU
 */
uint8 CONTROL_receiveState(void)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	0f 92       	push	r0
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
	 */
	/* Send HMI_ECU_READY byte to HMI_ECU to ask it to send the string */
	//UART_sendByte(CONTROL_ECU_READY);

	/* Receive String from HMI_ECU through UART */
	status = UART_receiveByte();
     c44:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <UART_receiveByte>
     c48:	89 83       	std	Y+1, r24	; 0x01

	return status;
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c4c:	0f 90       	pop	r0
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <CONTROL_receivePass>:

/* Description:
 * function to receive a password from the HMI ECU
 */
void CONTROL_receivePass(uint8 * a_pass)
{
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	00 d0       	rcall	.+0      	; 0xc5e <CONTROL_receivePass+0xa>
     c5e:	0f 92       	push	r0
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	9b 83       	std	Y+3, r25	; 0x03
     c66:	8a 83       	std	Y+2, r24	; 0x02
	 * CONTROL_ECU starts to send using UART
	 */
	/* Send CONTROL_ECU_READY byte to HMI_ECU to ask it to send the string */
	//UART_sendByte(CONTROL_ECU_READY);

	for(i=0; i<5; i++)
     c68:	19 82       	std	Y+1, r1	; 0x01
     c6a:	0f c0       	rjmp	.+30     	; 0xc8a <CONTROL_receivePass+0x36>
	{
		/* Receive String from HMI_ECU through UART */
		a_pass[i] = UART_receiveByte();
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	9b 81       	ldd	r25, Y+3	; 0x03
     c76:	8c 01       	movw	r16, r24
     c78:	02 0f       	add	r16, r18
     c7a:	13 1f       	adc	r17, r19
     c7c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <UART_receiveByte>
     c80:	f8 01       	movw	r30, r16
     c82:	80 83       	st	Z, r24
	 * CONTROL_ECU starts to send using UART
	 */
	/* Send CONTROL_ECU_READY byte to HMI_ECU to ask it to send the string */
	//UART_sendByte(CONTROL_ECU_READY);

	for(i=0; i<5; i++)
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	85 30       	cpi	r24, 0x05	; 5
     c8e:	70 f3       	brcs	.-36     	; 0xc6c <CONTROL_receivePass+0x18>
	{
		/* Receive String from HMI_ECU through UART */
		a_pass[i] = UART_receiveByte();
	}
}
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	08 95       	ret

00000ca0 <CONTROL_compPass>:

/* Description:
 * function to compare two passwords and return the state
 */
uint8 CONTROL_compPass(uint8 * a_pass , uint8 * a_test)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <CONTROL_compPass+0x6>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <CONTROL_compPass+0x8>
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <CONTROL_compPass+0xa>
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	9c 83       	std	Y+4, r25	; 0x04
     cb0:	8b 83       	std	Y+3, r24	; 0x03
     cb2:	7e 83       	std	Y+6, r23	; 0x06
     cb4:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i;
	uint8 status;

	for(i=0; i<5; i++)
     cb6:	1a 82       	std	Y+2, r1	; 0x02
     cb8:	1f c0       	rjmp	.+62     	; 0xcf8 <CONTROL_compPass+0x58>
	{
		/* if any character was unmatched then return the status with unmatched state*/
		if (a_pass[i] != a_test[i])
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	fc 01       	movw	r30, r24
     cc6:	e2 0f       	add	r30, r18
     cc8:	f3 1f       	adc	r31, r19
     cca:	40 81       	ld	r20, Z
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	8d 81       	ldd	r24, Y+5	; 0x05
     cd4:	9e 81       	ldd	r25, Y+6	; 0x06
     cd6:	fc 01       	movw	r30, r24
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	80 81       	ld	r24, Z
     cde:	48 17       	cp	r20, r24
     ce0:	19 f0       	breq	.+6      	; 0xce8 <CONTROL_compPass+0x48>
		{
			status = UNMATCHED;
     ce2:	80 e3       	ldi	r24, 0x30	; 48
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	0b c0       	rjmp	.+22     	; 0xcfe <CONTROL_compPass+0x5e>
			break;
		}
		/* if the 5 characters were matched return matched in the status */
		if ( i == 4 )
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	11 f4       	brne	.+4      	; 0xcf2 <CONTROL_compPass+0x52>
		{
			status = MATCHED;
     cee:	81 e3       	ldi	r24, 0x31	; 49
     cf0:	89 83       	std	Y+1, r24	; 0x01
uint8 CONTROL_compPass(uint8 * a_pass , uint8 * a_test)
{
	uint8 i;
	uint8 status;

	for(i=0; i<5; i++)
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	8f 5f       	subi	r24, 0xFF	; 255
     cf6:	8a 83       	std	Y+2, r24	; 0x02
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	85 30       	cpi	r24, 0x05	; 5
     cfc:	f0 f2       	brcs	.-68     	; 0xcba <CONTROL_compPass+0x1a>
		{
			status = MATCHED;
		}
	}

	return status;
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
}
     d00:	26 96       	adiw	r28, 0x06	; 6
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <CONTROL_checkPass>:

/* Description:
 * function to check an input pass send by HMI ECU with the stored pass in the EEPROM
 */
uint8 CONTROL_checkPass(void)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	6a 97       	sbiw	r28, 0x1a	; 26
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
	uint8 status,i;
	uint8 comp[5]; /* store pass from the EEPROM */
	uint8 pass[5]; /* store pass from HMI ECU */


	for (i=0; i<5 ; i++)
     d26:	1f 86       	std	Y+15, r1	; 0x0f
     d28:	87 c0       	rjmp	.+270    	; 0xe38 <CONTROL_checkPass+0x126>
	{
		/* read password from the external EEPROM */
		EEPROM_readByte(0x0311+i, &comp[i]);
     d2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	8f 5e       	subi	r24, 0xEF	; 239
     d32:	9c 4f       	sbci	r25, 0xFC	; 252
     d34:	ac 01       	movw	r20, r24
     d36:	8f 85       	ldd	r24, Y+15	; 0x0f
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	9e 01       	movw	r18, r28
     d3e:	2f 5e       	subi	r18, 0xEF	; 239
     d40:	3f 4f       	sbci	r19, 0xFF	; 255
     d42:	28 0f       	add	r18, r24
     d44:	39 1f       	adc	r19, r25
     d46:	ca 01       	movw	r24, r20
     d48:	b9 01       	movw	r22, r18
     d4a:	0e 94 20 0a 	call	0x1440	; 0x1440 <EEPROM_readByte>
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e2       	ldi	r26, 0x20	; 32
     d54:	b1 e4       	ldi	r27, 0x41	; 65
     d56:	8b 87       	std	Y+11, r24	; 0x0b
     d58:	9c 87       	std	Y+12, r25	; 0x0c
     d5a:	ad 87       	std	Y+13, r26	; 0x0d
     d5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d60:	7c 85       	ldd	r23, Y+12	; 0x0c
     d62:	8d 85       	ldd	r24, Y+13	; 0x0d
     d64:	9e 85       	ldd	r25, Y+14	; 0x0e
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	4a ef       	ldi	r20, 0xFA	; 250
     d6c:	54 e4       	ldi	r21, 0x44	; 68
     d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	8f 83       	std	Y+7, r24	; 0x07
     d78:	98 87       	std	Y+8, r25	; 0x08
     d7a:	a9 87       	std	Y+9, r26	; 0x09
     d7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d7e:	6f 81       	ldd	r22, Y+7	; 0x07
     d80:	78 85       	ldd	r23, Y+8	; 0x08
     d82:	89 85       	ldd	r24, Y+9	; 0x09
     d84:	9a 85       	ldd	r25, Y+10	; 0x0a
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e8       	ldi	r20, 0x80	; 128
     d8c:	5f e3       	ldi	r21, 0x3F	; 63
     d8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d92:	88 23       	and	r24, r24
     d94:	2c f4       	brge	.+10     	; 0xda0 <CONTROL_checkPass+0x8e>
		__ticks = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9e 83       	std	Y+6, r25	; 0x06
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	3f c0       	rjmp	.+126    	; 0xe1e <CONTROL_checkPass+0x10c>
	else if (__tmp > 65535)
     da0:	6f 81       	ldd	r22, Y+7	; 0x07
     da2:	78 85       	ldd	r23, Y+8	; 0x08
     da4:	89 85       	ldd	r24, Y+9	; 0x09
     da6:	9a 85       	ldd	r25, Y+10	; 0x0a
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	3f ef       	ldi	r19, 0xFF	; 255
     dac:	4f e7       	ldi	r20, 0x7F	; 127
     dae:	57 e4       	ldi	r21, 0x47	; 71
     db0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     db4:	18 16       	cp	r1, r24
     db6:	4c f5       	brge	.+82     	; 0xe0a <CONTROL_checkPass+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dba:	7c 85       	ldd	r23, Y+12	; 0x0c
     dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e2       	ldi	r20, 0x20	; 32
     dc6:	51 e4       	ldi	r21, 0x41	; 65
     dc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	9e 83       	std	Y+6, r25	; 0x06
     dde:	8d 83       	std	Y+5, r24	; 0x05
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <CONTROL_checkPass+0xee>
     de2:	88 ec       	ldi	r24, 0xC8	; 200
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9c 83       	std	Y+4, r25	; 0x04
     de8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <CONTROL_checkPass+0xdc>
     df2:	9c 83       	std	Y+4, r25	; 0x04
     df4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	9e 83       	std	Y+6, r25	; 0x06
     dfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	69 f7       	brne	.-38     	; 0xde2 <CONTROL_checkPass+0xd0>
     e08:	14 c0       	rjmp	.+40     	; 0xe32 <CONTROL_checkPass+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9e 83       	std	Y+6, r25	; 0x06
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	9e 81       	ldd	r25, Y+6	; 0x06
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <CONTROL_checkPass+0x118>
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01
	uint8 status,i;
	uint8 comp[5]; /* store pass from the EEPROM */
	uint8 pass[5]; /* store pass from HMI ECU */


	for (i=0; i<5 ; i++)
     e32:	8f 85       	ldd	r24, Y+15	; 0x0f
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	8f 87       	std	Y+15, r24	; 0x0f
     e38:	8f 85       	ldd	r24, Y+15	; 0x0f
     e3a:	85 30       	cpi	r24, 0x05	; 5
     e3c:	08 f4       	brcc	.+2      	; 0xe40 <CONTROL_checkPass+0x12e>
     e3e:	75 cf       	rjmp	.-278    	; 0xd2a <CONTROL_checkPass+0x18>
		/* read password from the external EEPROM */
		EEPROM_readByte(0x0311+i, &comp[i]);
		_delay_ms(10);
	}

	for (i=0 ; i<3 ; i++)
     e40:	1f 86       	std	Y+15, r1	; 0x0f
     e42:	23 c0       	rjmp	.+70     	; 0xe8a <CONTROL_checkPass+0x178>
	{
		/* receive pass from HMI ECU */
		CONTROL_receivePass(pass);
     e44:	ce 01       	movw	r24, r28
     e46:	46 96       	adiw	r24, 0x16	; 22
     e48:	0e 94 2a 06 	call	0xc54	; 0xc54 <CONTROL_receivePass>
		/* compare the received pass with the pass stored in EEPROM */
		status = CONTROL_compPass(pass ,comp);
     e4c:	ce 01       	movw	r24, r28
     e4e:	46 96       	adiw	r24, 0x16	; 22
     e50:	9e 01       	movw	r18, r28
     e52:	2f 5e       	subi	r18, 0xEF	; 239
     e54:	3f 4f       	sbci	r19, 0xFF	; 255
     e56:	b9 01       	movw	r22, r18
     e58:	0e 94 50 06 	call	0xca0	; 0xca0 <CONTROL_compPass>
     e5c:	88 8b       	std	Y+16, r24	; 0x10

		/* check if the password is matched */
		if (status == MATCHED)
     e5e:	88 89       	ldd	r24, Y+16	; 0x10
     e60:	81 33       	cpi	r24, 0x31	; 49
     e62:	21 f4       	brne	.+8      	; 0xe6c <CONTROL_checkPass+0x15a>
		{
			CONTROL_sendState(status);
     e64:	88 89       	ldd	r24, Y+16	; 0x10
     e66:	0e 94 0c 06 	call	0xc18	; 0xc18 <CONTROL_sendState>
     e6a:	12 c0       	rjmp	.+36     	; 0xe90 <CONTROL_checkPass+0x17e>
			break;
		}
		/* check if the password wasn't matched for 3 times */
		else if ( i ==2 )
     e6c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	31 f4       	brne	.+12     	; 0xe7e <CONTROL_checkPass+0x16c>
		{
			status = COMPARE_ERROR;
     e72:	82 e3       	ldi	r24, 0x32	; 50
     e74:	88 8b       	std	Y+16, r24	; 0x10
			CONTROL_sendState(status);
     e76:	88 89       	ldd	r24, Y+16	; 0x10
     e78:	0e 94 0c 06 	call	0xc18	; 0xc18 <CONTROL_sendState>
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <CONTROL_checkPass+0x17e>
			break;
		}
		/* send the state if unmatched */
		else
		{
			CONTROL_sendState(status);
     e7e:	88 89       	ldd	r24, Y+16	; 0x10
     e80:	0e 94 0c 06 	call	0xc18	; 0xc18 <CONTROL_sendState>
		/* read password from the external EEPROM */
		EEPROM_readByte(0x0311+i, &comp[i]);
		_delay_ms(10);
	}

	for (i=0 ; i<3 ; i++)
     e84:	8f 85       	ldd	r24, Y+15	; 0x0f
     e86:	8f 5f       	subi	r24, 0xFF	; 255
     e88:	8f 87       	std	Y+15, r24	; 0x0f
     e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8c:	83 30       	cpi	r24, 0x03	; 3
     e8e:	d0 f2       	brcs	.-76     	; 0xe44 <CONTROL_checkPass+0x132>
		{
			CONTROL_sendState(status);
		}
	}

	return status;
     e90:	88 89       	ldd	r24, Y+16	; 0x10
}
     e92:	6a 96       	adiw	r28, 0x1a	; 26
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	cf 91       	pop	r28
     ea0:	df 91       	pop	r29
     ea2:	08 95       	ret

00000ea4 <CONTROL_error>:

/* Description:
 * function to handle Error by turning the buzzer on for 60 second
 */
void CONTROL_error(void)
{
     ea4:	df 93       	push	r29
     ea6:	cf 93       	push	r28
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	2b 97       	sbiw	r28, 0x0b	; 11
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
	/* turn on the buzzer */
	Buzzer_on();
     eb8:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>

	/* set the timer callback function */
	Timer1_setCallBack(CONTROL_TIMER1_count2);
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	96 e0       	ldi	r25, 0x06	; 6
     ec0:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <Timer1_setCallBack>
	/* Timer1 Configuration */
	Timer1_ConfigType timerType = { 0 , 31250 , PRESCALER_256, COMPARE_MODE};
     ec4:	ce 01       	movw	r24, r28
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	98 87       	std	Y+8, r25	; 0x08
     eca:	8f 83       	std	Y+7, r24	; 0x07
     ecc:	e8 e6       	ldi	r30, 0x68	; 104
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	fa 87       	std	Y+10, r31	; 0x0a
     ed2:	e9 87       	std	Y+9, r30	; 0x09
     ed4:	f6 e0       	ldi	r31, 0x06	; 6
     ed6:	fb 87       	std	Y+11, r31	; 0x0b
     ed8:	e9 85       	ldd	r30, Y+9	; 0x09
     eda:	fa 85       	ldd	r31, Y+10	; 0x0a
     edc:	00 80       	ld	r0, Z
     ede:	89 85       	ldd	r24, Y+9	; 0x09
     ee0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee2:	01 96       	adiw	r24, 0x01	; 1
     ee4:	9a 87       	std	Y+10, r25	; 0x0a
     ee6:	89 87       	std	Y+9, r24	; 0x09
     ee8:	ef 81       	ldd	r30, Y+7	; 0x07
     eea:	f8 85       	ldd	r31, Y+8	; 0x08
     eec:	00 82       	st	Z, r0
     eee:	8f 81       	ldd	r24, Y+7	; 0x07
     ef0:	98 85       	ldd	r25, Y+8	; 0x08
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	98 87       	std	Y+8, r25	; 0x08
     ef6:	8f 83       	std	Y+7, r24	; 0x07
     ef8:	9b 85       	ldd	r25, Y+11	; 0x0b
     efa:	91 50       	subi	r25, 0x01	; 1
     efc:	9b 87       	std	Y+11, r25	; 0x0b
     efe:	eb 85       	ldd	r30, Y+11	; 0x0b
     f00:	ee 23       	and	r30, r30
     f02:	51 f7       	brne	.-44     	; 0xed8 <CONTROL_error+0x34>
	/* Timer1 initialization */
	Timer1_init(&timerType);
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Timer1_init>

	/* wait for 60 second */
	while (sec2 != 60){}
     f0c:	80 91 7d 00 	lds	r24, 0x007D
     f10:	8c 33       	cpi	r24, 0x3C	; 60
     f12:	e1 f7       	brne	.-8      	; 0xf0c <CONTROL_error+0x68>

	/* clear the sec1 variable */
	sec2 = 0;
     f14:	10 92 7d 00 	sts	0x007D, r1

	/* turn off the buzzer */
	Buzzer_off();
     f18:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>

	/* De-initialize the timer */
	Timer1_deInit();
     f1c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <Timer1_deInit>
}
     f20:	2b 96       	adiw	r28, 0x0b	; 11
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <CONTROL_storePass>:
 * 1. function to get the two passwords from the HMI ECU and compare them and send the
 * status to the HMI ECU
 * 2. store the password in the EEPROM
 */
void CONTROL_storePass()
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	6a 97       	sbiw	r28, 0x1a	; 26
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 pass[5];
	uint8 test[5];
	uint8 status = UNMATCHED;
     f46:	80 e3       	ldi	r24, 0x30	; 48
     f48:	8f 87       	std	Y+15, r24	; 0x0f
     f4a:	14 c0       	rjmp	.+40     	; 0xf74 <CONTROL_storePass+0x42>

	/* loop until the state of two passwords is matched */
	while (status == UNMATCHED)
	{
		/* receive the first password */
		CONTROL_receivePass(pass);
     f4c:	ce 01       	movw	r24, r28
     f4e:	41 96       	adiw	r24, 0x11	; 17
     f50:	0e 94 2a 06 	call	0xc54	; 0xc54 <CONTROL_receivePass>
		/* receive the confirmation password */
		CONTROL_receivePass(test);
     f54:	ce 01       	movw	r24, r28
     f56:	46 96       	adiw	r24, 0x16	; 22
     f58:	0e 94 2a 06 	call	0xc54	; 0xc54 <CONTROL_receivePass>

		/* compare the two passwords and get the status*/
		status = CONTROL_compPass(pass ,test);
     f5c:	ce 01       	movw	r24, r28
     f5e:	41 96       	adiw	r24, 0x11	; 17
     f60:	9e 01       	movw	r18, r28
     f62:	2a 5e       	subi	r18, 0xEA	; 234
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	b9 01       	movw	r22, r18
     f68:	0e 94 50 06 	call	0xca0	; 0xca0 <CONTROL_compPass>
     f6c:	8f 87       	std	Y+15, r24	; 0x0f
		/* send the status to HMI ECU */
		CONTROL_sendState(status);
     f6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f70:	0e 94 0c 06 	call	0xc18	; 0xc18 <CONTROL_sendState>
	uint8 pass[5];
	uint8 test[5];
	uint8 status = UNMATCHED;

	/* loop until the state of two passwords is matched */
	while (status == UNMATCHED)
     f74:	8f 85       	ldd	r24, Y+15	; 0x0f
     f76:	80 33       	cpi	r24, 0x30	; 48
     f78:	49 f3       	breq	.-46     	; 0xf4c <CONTROL_storePass+0x1a>
		status = CONTROL_compPass(pass ,test);
		/* send the status to HMI ECU */
		CONTROL_sendState(status);
	}

	for (i = 0 ; i<5 ; i++)
     f7a:	18 8a       	std	Y+16, r1	; 0x10
     f7c:	88 c0       	rjmp	.+272    	; 0x108e <CONTROL_storePass+0x15c>
	{
		/* Write password in the external EEPROM */
		EEPROM_writeByte(0x0311+i, pass[i]);
     f7e:	88 89       	ldd	r24, Y+16	; 0x10
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	8f 5e       	subi	r24, 0xEF	; 239
     f86:	9c 4f       	sbci	r25, 0xFC	; 252
     f88:	ac 01       	movw	r20, r24
     f8a:	88 89       	ldd	r24, Y+16	; 0x10
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	ce 01       	movw	r24, r28
     f92:	41 96       	adiw	r24, 0x11	; 17
     f94:	fc 01       	movw	r30, r24
     f96:	e2 0f       	add	r30, r18
     f98:	f3 1f       	adc	r31, r19
     f9a:	20 81       	ld	r18, Z
     f9c:	ca 01       	movw	r24, r20
     f9e:	62 2f       	mov	r22, r18
     fa0:	0e 94 df 09 	call	0x13be	; 0x13be <EEPROM_writeByte>
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	a0 e2       	ldi	r26, 0x20	; 32
     faa:	b1 e4       	ldi	r27, 0x41	; 65
     fac:	8b 87       	std	Y+11, r24	; 0x0b
     fae:	9c 87       	std	Y+12, r25	; 0x0c
     fb0:	ad 87       	std	Y+13, r26	; 0x0d
     fb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fba:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	4a ef       	ldi	r20, 0xFA	; 250
     fc2:	54 e4       	ldi	r21, 0x44	; 68
     fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8f 83       	std	Y+7, r24	; 0x07
     fce:	98 87       	std	Y+8, r25	; 0x08
     fd0:	a9 87       	std	Y+9, r26	; 0x09
     fd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fd4:	6f 81       	ldd	r22, Y+7	; 0x07
     fd6:	78 85       	ldd	r23, Y+8	; 0x08
     fd8:	89 85       	ldd	r24, Y+9	; 0x09
     fda:	9a 85       	ldd	r25, Y+10	; 0x0a
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e8       	ldi	r20, 0x80	; 128
     fe2:	5f e3       	ldi	r21, 0x3F	; 63
     fe4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe8:	88 23       	and	r24, r24
     fea:	2c f4       	brge	.+10     	; 0xff6 <CONTROL_storePass+0xc4>
		__ticks = 1;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9e 83       	std	Y+6, r25	; 0x06
     ff2:	8d 83       	std	Y+5, r24	; 0x05
     ff4:	3f c0       	rjmp	.+126    	; 0x1074 <CONTROL_storePass+0x142>
	else if (__tmp > 65535)
     ff6:	6f 81       	ldd	r22, Y+7	; 0x07
     ff8:	78 85       	ldd	r23, Y+8	; 0x08
     ffa:	89 85       	ldd	r24, Y+9	; 0x09
     ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	3f ef       	ldi	r19, 0xFF	; 255
    1002:	4f e7       	ldi	r20, 0x7F	; 127
    1004:	57 e4       	ldi	r21, 0x47	; 71
    1006:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    100a:	18 16       	cp	r1, r24
    100c:	4c f5       	brge	.+82     	; 0x1060 <CONTROL_storePass+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1010:	7c 85       	ldd	r23, Y+12	; 0x0c
    1012:	8d 85       	ldd	r24, Y+13	; 0x0d
    1014:	9e 85       	ldd	r25, Y+14	; 0x0e
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e2       	ldi	r20, 0x20	; 32
    101c:	51 e4       	ldi	r21, 0x41	; 65
    101e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1022:	dc 01       	movw	r26, r24
    1024:	cb 01       	movw	r24, r22
    1026:	bc 01       	movw	r22, r24
    1028:	cd 01       	movw	r24, r26
    102a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102e:	dc 01       	movw	r26, r24
    1030:	cb 01       	movw	r24, r22
    1032:	9e 83       	std	Y+6, r25	; 0x06
    1034:	8d 83       	std	Y+5, r24	; 0x05
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <CONTROL_storePass+0x124>
    1038:	88 ec       	ldi	r24, 0xC8	; 200
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	9c 83       	std	Y+4, r25	; 0x04
    103e:	8b 83       	std	Y+3, r24	; 0x03
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <CONTROL_storePass+0x112>
    1048:	9c 83       	std	Y+4, r25	; 0x04
    104a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	9e 83       	std	Y+6, r25	; 0x06
    1054:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	69 f7       	brne	.-38     	; 0x1038 <CONTROL_storePass+0x106>
    105e:	14 c0       	rjmp	.+40     	; 0x1088 <CONTROL_storePass+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1060:	6f 81       	ldd	r22, Y+7	; 0x07
    1062:	78 85       	ldd	r23, Y+8	; 0x08
    1064:	89 85       	ldd	r24, Y+9	; 0x09
    1066:	9a 85       	ldd	r25, Y+10	; 0x0a
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	8d 81       	ldd	r24, Y+5	; 0x05
    1076:	9e 81       	ldd	r25, Y+6	; 0x06
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	9a 81       	ldd	r25, Y+2	; 0x02
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <CONTROL_storePass+0x14e>
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
		status = CONTROL_compPass(pass ,test);
		/* send the status to HMI ECU */
		CONTROL_sendState(status);
	}

	for (i = 0 ; i<5 ; i++)
    1088:	88 89       	ldd	r24, Y+16	; 0x10
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	88 8b       	std	Y+16, r24	; 0x10
    108e:	88 89       	ldd	r24, Y+16	; 0x10
    1090:	85 30       	cpi	r24, 0x05	; 5
    1092:	08 f4       	brcc	.+2      	; 0x1096 <CONTROL_storePass+0x164>
    1094:	74 cf       	rjmp	.-280    	; 0xf7e <CONTROL_storePass+0x4c>
	{
		/* Write password in the external EEPROM */
		EEPROM_writeByte(0x0311+i, pass[i]);
		_delay_ms(10);
	}
}
    1096:	6a 96       	adiw	r28, 0x1a	; 26
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <CONTROL_mainOptions>:

/* Description:
 * function to get the user choice either open door or change password
 */
uint8 CONTROL_mainOptions(void)
{
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <CONTROL_mainOptions+0x6>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <CONTROL_mainOptions+0x8>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
	uint8 option;
	uint8 flag = '0';
    10b4:	80 e3       	ldi	r24, 0x30	; 48
    10b6:	89 83       	std	Y+1, r24	; 0x01

	/* receive the key pressed from the HMI ECU */
	option = CONTROL_receiveState();
    10b8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <CONTROL_receiveState>
    10bc:	8a 83       	std	Y+2, r24	; 0x02

	switch (option)
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	3c 83       	std	Y+4, r19	; 0x04
    10c6:	2b 83       	std	Y+3, r18	; 0x03
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	8b 32       	cpi	r24, 0x2B	; 43
    10ce:	91 05       	cpc	r25, r1
    10d0:	31 f0       	breq	.+12     	; 0x10de <CONTROL_mainOptions+0x36>
    10d2:	2b 81       	ldd	r18, Y+3	; 0x03
    10d4:	3c 81       	ldd	r19, Y+4	; 0x04
    10d6:	2d 32       	cpi	r18, 0x2D	; 45
    10d8:	31 05       	cpc	r19, r1
    10da:	21 f0       	breq	.+8      	; 0x10e4 <CONTROL_mainOptions+0x3c>
    10dc:	05 c0       	rjmp	.+10     	; 0x10e8 <CONTROL_mainOptions+0x40>
	{
	case '+':
		flag = '1';
    10de:	81 e3       	ldi	r24, 0x31	; 49
    10e0:	89 83       	std	Y+1, r24	; 0x01
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <CONTROL_mainOptions+0x40>
		break;
	case '-':
		flag= '2';
    10e4:	82 e3       	ldi	r24, 0x32	; 50
    10e6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	/* send the option to the HMI ECU */
	CONTROL_sendState(flag);
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	0e 94 0c 06 	call	0xc18	; 0xc18 <CONTROL_sendState>

	return flag;
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	08 95       	ret

000010fe <CONTROL_openDoor>:
/* Description:
 * check the two passwords from the HMI ECU to decide either open the
 * door or go to error if the password was incorrect for 3 times
 */
void CONTROL_openDoor(void)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	2e 97       	sbiw	r28, 0x0e	; 14
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
	uint8 status;

	/* check the entered passwords state */
	status = CONTROL_checkPass();
    1112:	0e 94 89 06 	call	0xd12	; 0xd12 <CONTROL_checkPass>
    1116:	89 83       	std	Y+1, r24	; 0x01

	switch (status)
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	39 87       	std	Y+9, r19	; 0x09
    1120:	28 87       	std	Y+8, r18	; 0x08
    1122:	88 85       	ldd	r24, Y+8	; 0x08
    1124:	99 85       	ldd	r25, Y+9	; 0x09
    1126:	81 33       	cpi	r24, 0x31	; 49
    1128:	91 05       	cpc	r25, r1
    112a:	31 f0       	breq	.+12     	; 0x1138 <CONTROL_openDoor+0x3a>
    112c:	e8 85       	ldd	r30, Y+8	; 0x08
    112e:	f9 85       	ldd	r31, Y+9	; 0x09
    1130:	e2 33       	cpi	r30, 0x32	; 50
    1132:	f1 05       	cpc	r31, r1
    1134:	b9 f1       	breq	.+110    	; 0x11a4 <CONTROL_openDoor+0xa6>
    1136:	38 c0       	rjmp	.+112    	; 0x11a8 <CONTROL_openDoor+0xaa>
	{
	/* check if the password is matched to go to open the door */
	case MATCHED:
		/* rotate teh motor to open the door */
		DcMotor_Rotate(CW,100);
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	64 e6       	ldi	r22, 0x64	; 100
    113c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <DcMotor_Rotate>

		/* store the call back function */
		Timer1_setCallBack(CONTROL_TIMER1_count1);
    1140:	8c ec       	ldi	r24, 0xCC	; 204
    1142:	95 e0       	ldi	r25, 0x05	; 5
    1144:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <Timer1_setCallBack>
		/* Timer1 Configuration */
		Timer1_ConfigType timerType = { 0 , 31250 , PRESCALER_256, COMPARE_MODE};
    1148:	9e 01       	movw	r18, r28
    114a:	2e 5f       	subi	r18, 0xFE	; 254
    114c:	3f 4f       	sbci	r19, 0xFF	; 255
    114e:	3b 87       	std	Y+11, r19	; 0x0b
    1150:	2a 87       	std	Y+10, r18	; 0x0a
    1152:	8e e6       	ldi	r24, 0x6E	; 110
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	9d 87       	std	Y+13, r25	; 0x0d
    1158:	8c 87       	std	Y+12, r24	; 0x0c
    115a:	96 e0       	ldi	r25, 0x06	; 6
    115c:	9e 87       	std	Y+14, r25	; 0x0e
    115e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1160:	fd 85       	ldd	r31, Y+13	; 0x0d
    1162:	00 80       	ld	r0, Z
    1164:	2c 85       	ldd	r18, Y+12	; 0x0c
    1166:	3d 85       	ldd	r19, Y+13	; 0x0d
    1168:	2f 5f       	subi	r18, 0xFF	; 255
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	3d 87       	std	Y+13, r19	; 0x0d
    116e:	2c 87       	std	Y+12, r18	; 0x0c
    1170:	ea 85       	ldd	r30, Y+10	; 0x0a
    1172:	fb 85       	ldd	r31, Y+11	; 0x0b
    1174:	00 82       	st	Z, r0
    1176:	2a 85       	ldd	r18, Y+10	; 0x0a
    1178:	3b 85       	ldd	r19, Y+11	; 0x0b
    117a:	2f 5f       	subi	r18, 0xFF	; 255
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    117e:	3b 87       	std	Y+11, r19	; 0x0b
    1180:	2a 87       	std	Y+10, r18	; 0x0a
    1182:	3e 85       	ldd	r19, Y+14	; 0x0e
    1184:	31 50       	subi	r19, 0x01	; 1
    1186:	3e 87       	std	Y+14, r19	; 0x0e
    1188:	8e 85       	ldd	r24, Y+14	; 0x0e
    118a:	88 23       	and	r24, r24
    118c:	41 f7       	brne	.-48     	; 0x115e <CONTROL_openDoor+0x60>
		/* Timer1 initialization */
		Timer1_init(&timerType);
    118e:	ce 01       	movw	r24, r28
    1190:	02 96       	adiw	r24, 0x02	; 2
    1192:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <Timer1_init>

		/* wait until the door is opened and entered and then closed to get out from the loop */
		while (sec1 != 33){}
    1196:	80 91 7c 00 	lds	r24, 0x007C
    119a:	81 32       	cpi	r24, 0x21	; 33
    119c:	e1 f7       	brne	.-8      	; 0x1196 <CONTROL_openDoor+0x98>

		/* clear the sec1 variable */
		sec1 = 0;
    119e:	10 92 7c 00 	sts	0x007C, r1
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <CONTROL_openDoor+0xaa>

	/* if the password is unmatched for 3 times then the status variable will have value of
	 * COMPARE ERROR and then go to the error function
	 */
	case COMPARE_ERROR:
		CONTROL_error();
    11a4:	0e 94 52 07 	call	0xea4	; 0xea4 <CONTROL_error>
		break;
	}

}
    11a8:	2e 96       	adiw	r28, 0x0e	; 14
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <CONTROL_changePass>:
/* Description:
 * check the two passwords from the HMI ECU to decide either change the
 * password or go to error if the password was incorrect for 3 times
 */
void CONTROL_changePass(void)
{
    11ba:	df 93       	push	r29
    11bc:	cf 93       	push	r28
    11be:	00 d0       	rcall	.+0      	; 0x11c0 <CONTROL_changePass+0x6>
    11c0:	0f 92       	push	r0
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	uint8 status;

	/* check the entered passwords state */
	status = CONTROL_checkPass();
    11c6:	0e 94 89 06 	call	0xd12	; 0xd12 <CONTROL_checkPass>
    11ca:	89 83       	std	Y+1, r24	; 0x01

	switch (status)
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	3b 83       	std	Y+3, r19	; 0x03
    11d4:	2a 83       	std	Y+2, r18	; 0x02
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	81 33       	cpi	r24, 0x31	; 49
    11dc:	91 05       	cpc	r25, r1
    11de:	31 f0       	breq	.+12     	; 0x11ec <CONTROL_changePass+0x32>
    11e0:	2a 81       	ldd	r18, Y+2	; 0x02
    11e2:	3b 81       	ldd	r19, Y+3	; 0x03
    11e4:	22 33       	cpi	r18, 0x32	; 50
    11e6:	31 05       	cpc	r19, r1
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <CONTROL_changePass+0x38>
    11ea:	05 c0       	rjmp	.+10     	; 0x11f6 <CONTROL_changePass+0x3c>
	{
	/* check if the password is matched to go to change the password */
	case MATCHED:
		CONTROL_storePass();
    11ec:	0e 94 99 07 	call	0xf32	; 0xf32 <CONTROL_storePass>
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <CONTROL_changePass+0x3c>

	/* if the password is unmatched for 3 times then the status variable will have value of
	 * COMPARE ERROR and then go to the error function
	 */
	case COMPARE_ERROR:
		CONTROL_error();
    11f2:	0e 94 52 07 	call	0xea4	; 0xea4 <CONTROL_error>
		break;
	}

}
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <main>:


int main (void)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
    120a:	60 97       	sbiw	r28, 0x10	; 16
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
	/* enable interrupt for the timer function*/
	SREG |= (1<<7) ;
    1216:	af e5       	ldi	r26, 0x5F	; 95
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ef e5       	ldi	r30, 0x5F	; 95
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	80 68       	ori	r24, 0x80	; 128
    1222:	8c 93       	st	X, r24

	/* UART Configuration */
	UART_ConfigType uartType = {EIGHT_BIT, DISABLED, ONE_BIT, 9600};
    1224:	9e 01       	movw	r18, r28
    1226:	2f 5f       	subi	r18, 0xFF	; 255
    1228:	3f 4f       	sbci	r19, 0xFF	; 255
    122a:	3d 87       	std	Y+13, r19	; 0x0d
    122c:	2c 87       	std	Y+12, r18	; 0x0c
    122e:	84 e7       	ldi	r24, 0x74	; 116
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	9f 87       	std	Y+15, r25	; 0x0f
    1234:	8e 87       	std	Y+14, r24	; 0x0e
    1236:	97 e0       	ldi	r25, 0x07	; 7
    1238:	98 8b       	std	Y+16, r25	; 0x10
    123a:	ee 85       	ldd	r30, Y+14	; 0x0e
    123c:	ff 85       	ldd	r31, Y+15	; 0x0f
    123e:	00 80       	ld	r0, Z
    1240:	2e 85       	ldd	r18, Y+14	; 0x0e
    1242:	3f 85       	ldd	r19, Y+15	; 0x0f
    1244:	2f 5f       	subi	r18, 0xFF	; 255
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	3f 87       	std	Y+15, r19	; 0x0f
    124a:	2e 87       	std	Y+14, r18	; 0x0e
    124c:	ec 85       	ldd	r30, Y+12	; 0x0c
    124e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1250:	00 82       	st	Z, r0
    1252:	2c 85       	ldd	r18, Y+12	; 0x0c
    1254:	3d 85       	ldd	r19, Y+13	; 0x0d
    1256:	2f 5f       	subi	r18, 0xFF	; 255
    1258:	3f 4f       	sbci	r19, 0xFF	; 255
    125a:	3d 87       	std	Y+13, r19	; 0x0d
    125c:	2c 87       	std	Y+12, r18	; 0x0c
    125e:	38 89       	ldd	r19, Y+16	; 0x10
    1260:	31 50       	subi	r19, 0x01	; 1
    1262:	38 8b       	std	Y+16, r19	; 0x10
    1264:	88 89       	ldd	r24, Y+16	; 0x10
    1266:	88 23       	and	r24, r24
    1268:	41 f7       	brne	.-48     	; 0x123a <main+0x38>
	/* UART initialization */
	UART_init(&uartType);
    126a:	ce 01       	movw	r24, r28
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <UART_init>

	/* TWI Configuration */
	TWI_ConfigType twiType = {TWI_BITRATE, TWI_ADDRESS};
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	88 87       	std	Y+8, r24	; 0x08
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	89 87       	std	Y+9, r24	; 0x09
	/* TWI initialization */
	TWI_init(&twiType);
    127a:	ce 01       	movw	r24, r28
    127c:	08 96       	adiw	r24, 0x08	; 8
    127e:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <TWI_init>

	/* initializing DcMotor */
	DcMotor_init();
    1282:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DcMotor_init>

	/* initializing buzzer */
	Buzzer_init();
    1286:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>

	/* compare passwords and store it in the EEPROM at the start */
	CONTROL_storePass();
    128a:	0e 94 99 07 	call	0xf32	; 0xf32 <CONTROL_storePass>
	for (;;)
	{
		switch (CONTROL_mainOptions())
    128e:	0e 94 54 08 	call	0x10a8	; 0x10a8 <CONTROL_mainOptions>
    1292:	e8 2f       	mov	r30, r24
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	fb 87       	std	Y+11, r31	; 0x0b
    1298:	ea 87       	std	Y+10, r30	; 0x0a
    129a:	2a 85       	ldd	r18, Y+10	; 0x0a
    129c:	3b 85       	ldd	r19, Y+11	; 0x0b
    129e:	21 33       	cpi	r18, 0x31	; 49
    12a0:	31 05       	cpc	r19, r1
    12a2:	31 f0       	breq	.+12     	; 0x12b0 <main+0xae>
    12a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12a8:	82 33       	cpi	r24, 0x32	; 50
    12aa:	91 05       	cpc	r25, r1
    12ac:	21 f0       	breq	.+8      	; 0x12b6 <main+0xb4>
    12ae:	ef cf       	rjmp	.-34     	; 0x128e <main+0x8c>
		{
		/* if the user choose '+' then go to open door function */
		case '1':
			CONTROL_openDoor();
    12b0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <CONTROL_openDoor>
    12b4:	ec cf       	rjmp	.-40     	; 0x128e <main+0x8c>
			break;

		/* if the user choose '-' then go to change password function */
		case '2':
			CONTROL_changePass();
    12b6:	0e 94 dd 08 	call	0x11ba	; 0x11ba <CONTROL_changePass>
    12ba:	e9 cf       	rjmp	.-46     	; 0x128e <main+0x8c>

000012bc <DcMotor_init>:
#include "gpio.h"
#include "pwm_timer0.h"

/* setting output pins for the motor and set an initializing value for them */
void DcMotor_init(void)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
	/* configure pins (PB4 and PB5) as output pins */
	GPIO_setupPinDirection(DCmotor_PORTA,DCmotor_PINA, PIN_OUTPUT);
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	61 e0       	ldi	r22, 0x01	; 1
    12c8:	41 e0       	ldi	r20, 0x01	; 1
    12ca:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCmotor_PORTB,DCmotor_PINB, PIN_OUTPUT);
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	62 e0       	ldi	r22, 0x02	; 2
    12d2:	41 e0       	ldi	r20, 0x01	; 1
    12d4:	0e 94 80 0a 	call	0x1500	; 0x1500 <GPIO_setupPinDirection>


	/* Clear the two bits to stop the motor at the beginning */
	GPIO_writePin(DCmotor_PORTA,DCmotor_PINA, LOGIC_LOW);
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
	GPIO_writePin(DCmotor_PORTB,DCmotor_PINB, LOGIC_LOW);
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	62 e0       	ldi	r22, 0x02	; 2
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <DcMotor_Rotate>:

/* setting the speed of the motor according to the input */
void DcMotor_Rotate(DcMotor_State a_state, uint8 a_speed)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <DcMotor_Rotate+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <DcMotor_Rotate+0x8>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	6a 83       	std	Y+2, r22	; 0x02

	/* rotate the motor according to the current state
	 * if state != 0 or != 1 or != 2 then do nothing
	 */
	switch(a_state)
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3c 83       	std	Y+4, r19	; 0x04
    130a:	2b 83       	std	Y+3, r18	; 0x03
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	91 05       	cpc	r25, r1
    1314:	a1 f0       	breq	.+40     	; 0x133e <DcMotor_Rotate+0x4c>
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	d1 f0       	breq	.+52     	; 0x1354 <DcMotor_Rotate+0x62>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	01 f5       	brne	.+64     	; 0x1368 <DcMotor_Rotate+0x76>
	{
	case 0:
		GPIO_writePin(DCmotor_PORTA,DCmotor_PINA, LOGIC_LOW);
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	61 e0       	ldi	r22, 0x01	; 1
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
		GPIO_writePin(DCmotor_PORTB,DCmotor_PINB, LOGIC_LOW);
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	62 e0       	ldi	r22, 0x02	; 2
    1336:	40 e0       	ldi	r20, 0x00	; 0
    1338:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    133c:	15 c0       	rjmp	.+42     	; 0x1368 <DcMotor_Rotate+0x76>
		break;
	case 1:
		GPIO_writePin(DCmotor_PORTA,DCmotor_PINA, LOGIC_LOW);
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	61 e0       	ldi	r22, 0x01	; 1
    1342:	40 e0       	ldi	r20, 0x00	; 0
    1344:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
		GPIO_writePin(DCmotor_PORTB,DCmotor_PINB, LOGIC_HIGH);
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	62 e0       	ldi	r22, 0x02	; 2
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
    1352:	0a c0       	rjmp	.+20     	; 0x1368 <DcMotor_Rotate+0x76>
		break;
	case 2:
		GPIO_writePin(DCmotor_PORTA,DCmotor_PINA, LOGIC_HIGH);
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	61 e0       	ldi	r22, 0x01	; 1
    1358:	41 e0       	ldi	r20, 0x01	; 1
    135a:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
		GPIO_writePin(DCmotor_PORTB,DCmotor_PINB, LOGIC_LOW);
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	62 e0       	ldi	r22, 0x02	; 2
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <GPIO_writePin>
		break;
	}

	if (a_speed < 0 || a_speed > 100 )
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	85 36       	cpi	r24, 0x65	; 101
    136c:	08 f5       	brcc	.+66     	; 0x13b0 <DcMotor_Rotate+0xbe>
	}
	else
	{
		/* convert the speed form percentage to bits according to the register size(256)
		 * and calling PWM function to generate the speed required by the motor */
		PWM_Timer0_Start((uint8)((uint32)(a_speed*255)/100));
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	48 2f       	mov	r20, r24
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	ca 01       	movw	r24, r20
    1376:	9c 01       	movw	r18, r24
    1378:	22 0f       	add	r18, r18
    137a:	33 1f       	adc	r19, r19
    137c:	c9 01       	movw	r24, r18
    137e:	96 95       	lsr	r25
    1380:	98 2f       	mov	r25, r24
    1382:	88 27       	eor	r24, r24
    1384:	97 95       	ror	r25
    1386:	87 95       	ror	r24
    1388:	82 1b       	sub	r24, r18
    138a:	93 0b       	sbc	r25, r19
    138c:	84 0f       	add	r24, r20
    138e:	95 1f       	adc	r25, r21
    1390:	aa 27       	eor	r26, r26
    1392:	97 fd       	sbrc	r25, 7
    1394:	a0 95       	com	r26
    1396:	ba 2f       	mov	r27, r26
    1398:	24 e6       	ldi	r18, 0x64	; 100
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	0e 94 6f 10 	call	0x20de	; 0x20de <__udivmodsi4>
    13a8:	da 01       	movw	r26, r20
    13aa:	c9 01       	movw	r24, r18
    13ac:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <PWM_Timer0_Start>
	}
}
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <EEPROM_writeByte+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <EEPROM_writeByte+0x8>
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    13d0:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    13d4:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <TWI_getStatus>
    13d8:	88 30       	cpi	r24, 0x08	; 8
    13da:	11 f0       	breq	.+4      	; 0x13e0 <EEPROM_writeByte+0x22>
        return ERROR;
    13dc:	1c 82       	std	Y+4, r1	; 0x04
    13de:	28 c0       	rjmp	.+80     	; 0x1430 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	9a 81       	ldd	r25, Y+2	; 0x02
    13e4:	80 70       	andi	r24, 0x00	; 0
    13e6:	97 70       	andi	r25, 0x07	; 7
    13e8:	88 0f       	add	r24, r24
    13ea:	89 2f       	mov	r24, r25
    13ec:	88 1f       	adc	r24, r24
    13ee:	99 0b       	sbc	r25, r25
    13f0:	91 95       	neg	r25
    13f2:	80 6a       	ori	r24, 0xA0	; 160
    13f4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13f8:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <TWI_getStatus>
    13fc:	88 31       	cpi	r24, 0x18	; 24
    13fe:	11 f0       	breq	.+4      	; 0x1404 <EEPROM_writeByte+0x46>
        return ERROR; 
    1400:	1c 82       	std	Y+4, r1	; 0x04
    1402:	16 c0       	rjmp	.+44     	; 0x1430 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    140a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <TWI_getStatus>
    140e:	88 32       	cpi	r24, 0x28	; 40
    1410:	11 f0       	breq	.+4      	; 0x1416 <EEPROM_writeByte+0x58>
        return ERROR;
    1412:	1c 82       	std	Y+4, r1	; 0x04
    1414:	0d c0       	rjmp	.+26     	; 0x1430 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    141c:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <TWI_getStatus>
    1420:	88 32       	cpi	r24, 0x28	; 40
    1422:	11 f0       	breq	.+4      	; 0x1428 <EEPROM_writeByte+0x6a>
        return ERROR;
    1424:	1c 82       	std	Y+4, r1	; 0x04
    1426:	04 c0       	rjmp	.+8      	; 0x1430 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1428:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <TWI_stop>
	
    return SUCCESS;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	8c 83       	std	Y+4, r24	; 0x04
    1430:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <EEPROM_readByte+0x6>
    1446:	00 d0       	rcall	.+0      	; 0x1448 <EEPROM_readByte+0x8>
    1448:	0f 92       	push	r0
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	7c 83       	std	Y+4, r23	; 0x04
    1454:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1456:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    145a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <TWI_getStatus>
    145e:	88 30       	cpi	r24, 0x08	; 8
    1460:	11 f0       	breq	.+4      	; 0x1466 <EEPROM_readByte+0x26>
        return ERROR;
    1462:	1d 82       	std	Y+5, r1	; 0x05
    1464:	44 c0       	rjmp	.+136    	; 0x14ee <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	80 70       	andi	r24, 0x00	; 0
    146c:	97 70       	andi	r25, 0x07	; 7
    146e:	88 0f       	add	r24, r24
    1470:	89 2f       	mov	r24, r25
    1472:	88 1f       	adc	r24, r24
    1474:	99 0b       	sbc	r25, r25
    1476:	91 95       	neg	r25
    1478:	80 6a       	ori	r24, 0xA0	; 160
    147a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    147e:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <TWI_getStatus>
    1482:	88 31       	cpi	r24, 0x18	; 24
    1484:	11 f0       	breq	.+4      	; 0x148a <EEPROM_readByte+0x4a>
        return ERROR;
    1486:	1d 82       	std	Y+5, r1	; 0x05
    1488:	32 c0       	rjmp	.+100    	; 0x14ee <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1490:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <TWI_getStatus>
    1494:	88 32       	cpi	r24, 0x28	; 40
    1496:	11 f0       	breq	.+4      	; 0x149c <EEPROM_readByte+0x5c>
        return ERROR;
    1498:	1d 82       	std	Y+5, r1	; 0x05
    149a:	29 c0       	rjmp	.+82     	; 0x14ee <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    149c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    14a0:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <TWI_getStatus>
    14a4:	80 31       	cpi	r24, 0x10	; 16
    14a6:	11 f0       	breq	.+4      	; 0x14ac <EEPROM_readByte+0x6c>
        return ERROR;
    14a8:	1d 82       	std	Y+5, r1	; 0x05
    14aa:	21 c0       	rjmp	.+66     	; 0x14ee <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	80 70       	andi	r24, 0x00	; 0
    14b2:	97 70       	andi	r25, 0x07	; 7
    14b4:	88 0f       	add	r24, r24
    14b6:	89 2f       	mov	r24, r25
    14b8:	88 1f       	adc	r24, r24
    14ba:	99 0b       	sbc	r25, r25
    14bc:	91 95       	neg	r25
    14be:	81 6a       	ori	r24, 0xA1	; 161
    14c0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    14c4:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <TWI_getStatus>
    14c8:	80 34       	cpi	r24, 0x40	; 64
    14ca:	11 f0       	breq	.+4      	; 0x14d0 <EEPROM_readByte+0x90>
        return ERROR;
    14cc:	1d 82       	std	Y+5, r1	; 0x05
    14ce:	0f c0       	rjmp	.+30     	; 0x14ee <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    14d0:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <TWI_readByteWithNACK>
    14d4:	eb 81       	ldd	r30, Y+3	; 0x03
    14d6:	fc 81       	ldd	r31, Y+4	; 0x04
    14d8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    14da:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <TWI_getStatus>
    14de:	88 35       	cpi	r24, 0x58	; 88
    14e0:	11 f0       	breq	.+4      	; 0x14e6 <EEPROM_readByte+0xa6>
        return ERROR;
    14e2:	1d 82       	std	Y+5, r1	; 0x05
    14e4:	04 c0       	rjmp	.+8      	; 0x14ee <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    14e6:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <TWI_stop>

    return SUCCESS;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	8d 83       	std	Y+5, r24	; 0x05
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	00 d0       	rcall	.+0      	; 0x1506 <GPIO_setupPinDirection+0x6>
    1506:	00 d0       	rcall	.+0      	; 0x1508 <GPIO_setupPinDirection+0x8>
    1508:	0f 92       	push	r0
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	89 83       	std	Y+1, r24	; 0x01
    1510:	6a 83       	std	Y+2, r22	; 0x02
    1512:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1514:	8a 81       	ldd	r24, Y+2	; 0x02
    1516:	88 30       	cpi	r24, 0x08	; 8
    1518:	08 f0       	brcs	.+2      	; 0x151c <GPIO_setupPinDirection+0x1c>
    151a:	d5 c0       	rjmp	.+426    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	84 30       	cpi	r24, 0x04	; 4
    1520:	08 f0       	brcs	.+2      	; 0x1524 <GPIO_setupPinDirection+0x24>
    1522:	d1 c0       	rjmp	.+418    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3d 83       	std	Y+5, r19	; 0x05
    152c:	2c 83       	std	Y+4, r18	; 0x04
    152e:	8c 81       	ldd	r24, Y+4	; 0x04
    1530:	9d 81       	ldd	r25, Y+5	; 0x05
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	09 f4       	brne	.+2      	; 0x153a <GPIO_setupPinDirection+0x3a>
    1538:	43 c0       	rjmp	.+134    	; 0x15c0 <GPIO_setupPinDirection+0xc0>
    153a:	2c 81       	ldd	r18, Y+4	; 0x04
    153c:	3d 81       	ldd	r19, Y+5	; 0x05
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	2c f4       	brge	.+10     	; 0x154e <GPIO_setupPinDirection+0x4e>
    1544:	8c 81       	ldd	r24, Y+4	; 0x04
    1546:	9d 81       	ldd	r25, Y+5	; 0x05
    1548:	00 97       	sbiw	r24, 0x00	; 0
    154a:	71 f0       	breq	.+28     	; 0x1568 <GPIO_setupPinDirection+0x68>
    154c:	bc c0       	rjmp	.+376    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
    154e:	2c 81       	ldd	r18, Y+4	; 0x04
    1550:	3d 81       	ldd	r19, Y+5	; 0x05
    1552:	22 30       	cpi	r18, 0x02	; 2
    1554:	31 05       	cpc	r19, r1
    1556:	09 f4       	brne	.+2      	; 0x155a <GPIO_setupPinDirection+0x5a>
    1558:	5f c0       	rjmp	.+190    	; 0x1618 <GPIO_setupPinDirection+0x118>
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	9d 81       	ldd	r25, Y+5	; 0x05
    155e:	83 30       	cpi	r24, 0x03	; 3
    1560:	91 05       	cpc	r25, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <GPIO_setupPinDirection+0x66>
    1564:	85 c0       	rjmp	.+266    	; 0x1670 <GPIO_setupPinDirection+0x170>
    1566:	af c0       	rjmp	.+350    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	a1 f4       	brne	.+40     	; 0x1596 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    156e:	aa e3       	ldi	r26, 0x3A	; 58
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ea e3       	ldi	r30, 0x3A	; 58
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <GPIO_setupPinDirection+0x8c>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <GPIO_setupPinDirection+0x88>
    1590:	84 2b       	or	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	98 c0       	rjmp	.+304    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1596:	aa e3       	ldi	r26, 0x3A	; 58
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	ea e3       	ldi	r30, 0x3A	; 58
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <GPIO_setupPinDirection+0xb4>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <GPIO_setupPinDirection+0xb0>
    15b8:	80 95       	com	r24
    15ba:	84 23       	and	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	83 c0       	rjmp	.+262    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	a1 f4       	brne	.+40     	; 0x15ee <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    15c6:	a7 e3       	ldi	r26, 0x37	; 55
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e7 e3       	ldi	r30, 0x37	; 55
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <GPIO_setupPinDirection+0xe4>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <GPIO_setupPinDirection+0xe0>
    15e8:	84 2b       	or	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	6c c0       	rjmp	.+216    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15ee:	a7 e3       	ldi	r26, 0x37	; 55
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e7 e3       	ldi	r30, 0x37	; 55
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <GPIO_setupPinDirection+0x10c>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <GPIO_setupPinDirection+0x108>
    1610:	80 95       	com	r24
    1612:	84 23       	and	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	57 c0       	rjmp	.+174    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	a1 f4       	brne	.+40     	; 0x1646 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    161e:	a4 e3       	ldi	r26, 0x34	; 52
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e4 e3       	ldi	r30, 0x34	; 52
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <GPIO_setupPinDirection+0x13c>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <GPIO_setupPinDirection+0x138>
    1640:	84 2b       	or	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	40 c0       	rjmp	.+128    	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1646:	a4 e3       	ldi	r26, 0x34	; 52
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e4 e3       	ldi	r30, 0x34	; 52
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <GPIO_setupPinDirection+0x164>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <GPIO_setupPinDirection+0x160>
    1668:	80 95       	com	r24
    166a:	84 23       	and	r24, r20
    166c:	8c 93       	st	X, r24
    166e:	2b c0       	rjmp	.+86     	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	81 30       	cpi	r24, 0x01	; 1
    1674:	a1 f4       	brne	.+40     	; 0x169e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1676:	a1 e3       	ldi	r26, 0x31	; 49
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e1 e3       	ldi	r30, 0x31	; 49
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <GPIO_setupPinDirection+0x194>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <GPIO_setupPinDirection+0x190>
    1698:	84 2b       	or	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	14 c0       	rjmp	.+40     	; 0x16c6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    169e:	a1 e3       	ldi	r26, 0x31	; 49
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e1 e3       	ldi	r30, 0x31	; 49
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	48 2f       	mov	r20, r24
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <GPIO_setupPinDirection+0x1bc>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <GPIO_setupPinDirection+0x1b8>
    16c0:	80 95       	com	r24
    16c2:	84 23       	and	r24, r20
    16c4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	cf 91       	pop	r28
    16d2:	df 91       	pop	r29
    16d4:	08 95       	ret

000016d6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16d6:	df 93       	push	r29
    16d8:	cf 93       	push	r28
    16da:	00 d0       	rcall	.+0      	; 0x16dc <GPIO_writePin+0x6>
    16dc:	00 d0       	rcall	.+0      	; 0x16de <GPIO_writePin+0x8>
    16de:	0f 92       	push	r0
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	6a 83       	std	Y+2, r22	; 0x02
    16e8:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	88 30       	cpi	r24, 0x08	; 8
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <GPIO_writePin+0x1c>
    16f0:	d5 c0       	rjmp	.+426    	; 0x189c <GPIO_writePin+0x1c6>
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	84 30       	cpi	r24, 0x04	; 4
    16f6:	08 f0       	brcs	.+2      	; 0x16fa <GPIO_writePin+0x24>
    16f8:	d1 c0       	rjmp	.+418    	; 0x189c <GPIO_writePin+0x1c6>
		{
			/* Do Nothing */
		}
	else
	{
		switch (port_num)
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	3d 83       	std	Y+5, r19	; 0x05
    1702:	2c 83       	std	Y+4, r18	; 0x04
    1704:	8c 81       	ldd	r24, Y+4	; 0x04
    1706:	9d 81       	ldd	r25, Y+5	; 0x05
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	91 05       	cpc	r25, r1
    170c:	09 f4       	brne	.+2      	; 0x1710 <GPIO_writePin+0x3a>
    170e:	43 c0       	rjmp	.+134    	; 0x1796 <GPIO_writePin+0xc0>
    1710:	2c 81       	ldd	r18, Y+4	; 0x04
    1712:	3d 81       	ldd	r19, Y+5	; 0x05
    1714:	22 30       	cpi	r18, 0x02	; 2
    1716:	31 05       	cpc	r19, r1
    1718:	2c f4       	brge	.+10     	; 0x1724 <GPIO_writePin+0x4e>
    171a:	8c 81       	ldd	r24, Y+4	; 0x04
    171c:	9d 81       	ldd	r25, Y+5	; 0x05
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	71 f0       	breq	.+28     	; 0x173e <GPIO_writePin+0x68>
    1722:	bc c0       	rjmp	.+376    	; 0x189c <GPIO_writePin+0x1c6>
    1724:	2c 81       	ldd	r18, Y+4	; 0x04
    1726:	3d 81       	ldd	r19, Y+5	; 0x05
    1728:	22 30       	cpi	r18, 0x02	; 2
    172a:	31 05       	cpc	r19, r1
    172c:	09 f4       	brne	.+2      	; 0x1730 <GPIO_writePin+0x5a>
    172e:	5f c0       	rjmp	.+190    	; 0x17ee <GPIO_writePin+0x118>
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	9d 81       	ldd	r25, Y+5	; 0x05
    1734:	83 30       	cpi	r24, 0x03	; 3
    1736:	91 05       	cpc	r25, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <GPIO_writePin+0x66>
    173a:	85 c0       	rjmp	.+266    	; 0x1846 <GPIO_writePin+0x170>
    173c:	af c0       	rjmp	.+350    	; 0x189c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID :
			if(value == LOGIC_HIGH)
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	a1 f4       	brne	.+40     	; 0x176c <GPIO_writePin+0x96>
						{
							SET_BIT(PORTA,pin_num);
    1744:	ab e3       	ldi	r26, 0x3B	; 59
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	eb e3       	ldi	r30, 0x3B	; 59
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_writePin+0x8c>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_writePin+0x88>
    1766:	84 2b       	or	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	98 c0       	rjmp	.+304    	; 0x189c <GPIO_writePin+0x1c6>
						}
						else
						{
							CLEAR_BIT(PORTA,pin_num);
    176c:	ab e3       	ldi	r26, 0x3B	; 59
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	eb e3       	ldi	r30, 0x3B	; 59
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <GPIO_writePin+0xb4>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <GPIO_writePin+0xb0>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	83 c0       	rjmp	.+262    	; 0x189c <GPIO_writePin+0x1c6>
						}
			break;
		case PORTB_ID :
					if(value == LOGIC_HIGH)
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	a1 f4       	brne	.+40     	; 0x17c4 <GPIO_writePin+0xee>
								{
									SET_BIT(PORTB,pin_num);
    179c:	a8 e3       	ldi	r26, 0x38	; 56
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <GPIO_writePin+0xe4>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <GPIO_writePin+0xe0>
    17be:	84 2b       	or	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	6c c0       	rjmp	.+216    	; 0x189c <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTB,pin_num);
    17c4:	a8 e3       	ldi	r26, 0x38	; 56
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e8 e3       	ldi	r30, 0x38	; 56
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <GPIO_writePin+0x10c>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <GPIO_writePin+0x108>
    17e6:	80 95       	com	r24
    17e8:	84 23       	and	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	57 c0       	rjmp	.+174    	; 0x189c <GPIO_writePin+0x1c6>
								}
					break;
		case PORTC_ID :
					if(value == LOGIC_HIGH)
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	a1 f4       	brne	.+40     	; 0x181c <GPIO_writePin+0x146>
								{
									SET_BIT(PORTC,pin_num);
    17f4:	a5 e3       	ldi	r26, 0x35	; 53
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e5 e3       	ldi	r30, 0x35	; 53
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <GPIO_writePin+0x13c>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <GPIO_writePin+0x138>
    1816:	84 2b       	or	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	40 c0       	rjmp	.+128    	; 0x189c <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTC,pin_num);
    181c:	a5 e3       	ldi	r26, 0x35	; 53
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e5 e3       	ldi	r30, 0x35	; 53
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <GPIO_writePin+0x164>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <GPIO_writePin+0x160>
    183e:	80 95       	com	r24
    1840:	84 23       	and	r24, r20
    1842:	8c 93       	st	X, r24
    1844:	2b c0       	rjmp	.+86     	; 0x189c <GPIO_writePin+0x1c6>
								}
					break;
		case PORTD_ID :
					if(value == LOGIC_HIGH)
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	a1 f4       	brne	.+40     	; 0x1874 <GPIO_writePin+0x19e>
								{
									SET_BIT(PORTD,pin_num);
    184c:	a2 e3       	ldi	r26, 0x32	; 50
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e2 e3       	ldi	r30, 0x32	; 50
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	48 2f       	mov	r20, r24
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	02 2e       	mov	r0, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <GPIO_writePin+0x194>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	0a 94       	dec	r0
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <GPIO_writePin+0x190>
    186e:	84 2b       	or	r24, r20
    1870:	8c 93       	st	X, r24
    1872:	14 c0       	rjmp	.+40     	; 0x189c <GPIO_writePin+0x1c6>
								}
								else
								{
									CLEAR_BIT(PORTD,pin_num);
    1874:	a2 e3       	ldi	r26, 0x32	; 50
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e2 e3       	ldi	r30, 0x32	; 50
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	48 2f       	mov	r20, r24
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	02 2e       	mov	r0, r18
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <GPIO_writePin+0x1bc>
    188e:	88 0f       	add	r24, r24
    1890:	99 1f       	adc	r25, r25
    1892:	0a 94       	dec	r0
    1894:	e2 f7       	brpl	.-8      	; 0x188e <GPIO_writePin+0x1b8>
    1896:	80 95       	com	r24
    1898:	84 23       	and	r24, r20
    189a:	8c 93       	st	X, r24
								}
					break;
		}
	}

}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <GPIO_readPin+0x6>
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <GPIO_readPin+0x8>
    18b4:	0f 92       	push	r0
    18b6:	cd b7       	in	r28, 0x3d	; 61
    18b8:	de b7       	in	r29, 0x3e	; 62
    18ba:	8a 83       	std	Y+2, r24	; 0x02
    18bc:	6b 83       	std	Y+3, r22	; 0x03
    uint8 pin_value = LOGIC_LOW;
    18be:	19 82       	std	Y+1, r1	; 0x01
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	88 30       	cpi	r24, 0x08	; 8
    18c4:	08 f0       	brcs	.+2      	; 0x18c8 <GPIO_readPin+0x1c>
    18c6:	84 c0       	rjmp	.+264    	; 0x19d0 <GPIO_readPin+0x124>
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	08 f0       	brcs	.+2      	; 0x18d0 <GPIO_readPin+0x24>
    18ce:	80 c0       	rjmp	.+256    	; 0x19d0 <GPIO_readPin+0x124>
			{
				/* Do nothing */
			}
	else
	{
		switch(port_num)
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	3d 83       	std	Y+5, r19	; 0x05
    18d8:	2c 83       	std	Y+4, r18	; 0x04
    18da:	4c 81       	ldd	r20, Y+4	; 0x04
    18dc:	5d 81       	ldd	r21, Y+5	; 0x05
    18de:	41 30       	cpi	r20, 0x01	; 1
    18e0:	51 05       	cpc	r21, r1
    18e2:	79 f1       	breq	.+94     	; 0x1942 <GPIO_readPin+0x96>
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	9d 81       	ldd	r25, Y+5	; 0x05
    18e8:	82 30       	cpi	r24, 0x02	; 2
    18ea:	91 05       	cpc	r25, r1
    18ec:	34 f4       	brge	.+12     	; 0x18fa <GPIO_readPin+0x4e>
    18ee:	2c 81       	ldd	r18, Y+4	; 0x04
    18f0:	3d 81       	ldd	r19, Y+5	; 0x05
    18f2:	21 15       	cp	r18, r1
    18f4:	31 05       	cpc	r19, r1
    18f6:	69 f0       	breq	.+26     	; 0x1912 <GPIO_readPin+0x66>
    18f8:	6b c0       	rjmp	.+214    	; 0x19d0 <GPIO_readPin+0x124>
    18fa:	4c 81       	ldd	r20, Y+4	; 0x04
    18fc:	5d 81       	ldd	r21, Y+5	; 0x05
    18fe:	42 30       	cpi	r20, 0x02	; 2
    1900:	51 05       	cpc	r21, r1
    1902:	b9 f1       	breq	.+110    	; 0x1972 <GPIO_readPin+0xc6>
    1904:	8c 81       	ldd	r24, Y+4	; 0x04
    1906:	9d 81       	ldd	r25, Y+5	; 0x05
    1908:	83 30       	cpi	r24, 0x03	; 3
    190a:	91 05       	cpc	r25, r1
    190c:	09 f4       	brne	.+2      	; 0x1910 <GPIO_readPin+0x64>
    190e:	49 c0       	rjmp	.+146    	; 0x19a2 <GPIO_readPin+0xf6>
    1910:	5f c0       	rjmp	.+190    	; 0x19d0 <GPIO_readPin+0x124>
		{
		case PORTA_ID : if(BIT_IS_SET(PINA,pin_num))
    1912:	e9 e3       	ldi	r30, 0x39	; 57
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a9 01       	movw	r20, r18
    1924:	02 c0       	rjmp	.+4      	; 0x192a <GPIO_readPin+0x7e>
    1926:	55 95       	asr	r21
    1928:	47 95       	ror	r20
    192a:	8a 95       	dec	r24
    192c:	e2 f7       	brpl	.-8      	; 0x1926 <GPIO_readPin+0x7a>
    192e:	ca 01       	movw	r24, r20
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	90 70       	andi	r25, 0x00	; 0
    1934:	88 23       	and	r24, r24
    1936:	19 f0       	breq	.+6      	; 0x193e <GPIO_readPin+0x92>
		{
			pin_value = LOGIC_HIGH ;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	49 c0       	rjmp	.+146    	; 0x19d0 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    193e:	19 82       	std	Y+1, r1	; 0x01
    1940:	47 c0       	rjmp	.+142    	; 0x19d0 <GPIO_readPin+0x124>
		}
		break;
		case PORTB_ID : if(BIT_IS_SET(PINB,pin_num))
    1942:	e6 e3       	ldi	r30, 0x36	; 54
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a9 01       	movw	r20, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <GPIO_readPin+0xae>
    1956:	55 95       	asr	r21
    1958:	47 95       	ror	r20
    195a:	8a 95       	dec	r24
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <GPIO_readPin+0xaa>
    195e:	ca 01       	movw	r24, r20
    1960:	81 70       	andi	r24, 0x01	; 1
    1962:	90 70       	andi	r25, 0x00	; 0
    1964:	88 23       	and	r24, r24
    1966:	19 f0       	breq	.+6      	; 0x196e <GPIO_readPin+0xc2>
		{
			pin_value = LOGIC_HIGH ;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	31 c0       	rjmp	.+98     	; 0x19d0 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    196e:	19 82       	std	Y+1, r1	; 0x01
    1970:	2f c0       	rjmp	.+94     	; 0x19d0 <GPIO_readPin+0x124>
		}
		break;
		case PORTC_ID : if(BIT_IS_SET(PINC,pin_num))
    1972:	e3 e3       	ldi	r30, 0x33	; 51
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a9 01       	movw	r20, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <GPIO_readPin+0xde>
    1986:	55 95       	asr	r21
    1988:	47 95       	ror	r20
    198a:	8a 95       	dec	r24
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <GPIO_readPin+0xda>
    198e:	ca 01       	movw	r24, r20
    1990:	81 70       	andi	r24, 0x01	; 1
    1992:	90 70       	andi	r25, 0x00	; 0
    1994:	88 23       	and	r24, r24
    1996:	19 f0       	breq	.+6      	; 0x199e <GPIO_readPin+0xf2>
		{
			pin_value = LOGIC_HIGH ;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	19 c0       	rjmp	.+50     	; 0x19d0 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    199e:	19 82       	std	Y+1, r1	; 0x01
    19a0:	17 c0       	rjmp	.+46     	; 0x19d0 <GPIO_readPin+0x124>
		}
		break;

		case PORTD_ID : if(BIT_IS_SET(PIND,pin_num))
    19a2:	e0 e3       	ldi	r30, 0x30	; 48
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	28 2f       	mov	r18, r24
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a9 01       	movw	r20, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <GPIO_readPin+0x10e>
    19b6:	55 95       	asr	r21
    19b8:	47 95       	ror	r20
    19ba:	8a 95       	dec	r24
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <GPIO_readPin+0x10a>
    19be:	ca 01       	movw	r24, r20
    19c0:	81 70       	andi	r24, 0x01	; 1
    19c2:	90 70       	andi	r25, 0x00	; 0
    19c4:	88 23       	and	r24, r24
    19c6:	19 f0       	breq	.+6      	; 0x19ce <GPIO_readPin+0x122>
		{
			pin_value = LOGIC_HIGH ;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <GPIO_readPin+0x124>
		}
		else
		{
			pin_value = LOGIC_LOW;
    19ce:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
		}
	}
    return pin_value ;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <GPIO_setupPortDirection+0x6>
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <GPIO_setupPortDirection+0x8>
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	84 30       	cpi	r24, 0x04	; 4
    19f6:	90 f5       	brcc	.+100    	; 0x1a5c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	3c 83       	std	Y+4, r19	; 0x04
    1a00:	2b 83       	std	Y+3, r18	; 0x03
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	91 05       	cpc	r25, r1
    1a0a:	d1 f0       	breq	.+52     	; 0x1a40 <GPIO_setupPortDirection+0x5e>
    1a0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a10:	22 30       	cpi	r18, 0x02	; 2
    1a12:	31 05       	cpc	r19, r1
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <GPIO_setupPortDirection+0x3e>
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	61 f0       	breq	.+24     	; 0x1a36 <GPIO_setupPortDirection+0x54>
    1a1e:	1e c0       	rjmp	.+60     	; 0x1a5c <GPIO_setupPortDirection+0x7a>
    1a20:	2b 81       	ldd	r18, Y+3	; 0x03
    1a22:	3c 81       	ldd	r19, Y+4	; 0x04
    1a24:	22 30       	cpi	r18, 0x02	; 2
    1a26:	31 05       	cpc	r19, r1
    1a28:	81 f0       	breq	.+32     	; 0x1a4a <GPIO_setupPortDirection+0x68>
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2e:	83 30       	cpi	r24, 0x03	; 3
    1a30:	91 05       	cpc	r25, r1
    1a32:	81 f0       	breq	.+32     	; 0x1a54 <GPIO_setupPortDirection+0x72>
    1a34:	13 c0       	rjmp	.+38     	; 0x1a5c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a36:	ea e3       	ldi	r30, 0x3A	; 58
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	80 83       	st	Z, r24
    1a3e:	0e c0       	rjmp	.+28     	; 0x1a5c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a40:	e7 e3       	ldi	r30, 0x37	; 55
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	80 83       	st	Z, r24
    1a48:	09 c0       	rjmp	.+18     	; 0x1a5c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a4a:	e4 e3       	ldi	r30, 0x34	; 52
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	80 83       	st	Z, r24
    1a52:	04 c0       	rjmp	.+8      	; 0x1a5c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a54:	e1 e3       	ldi	r30, 0x31	; 49
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num , uint8 value)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <GPIO_writePort+0x6>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <GPIO_writePort+0x8>
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	6a 83       	std	Y+2, r22	; 0x02
	if((port_num >= NUM_OF_PORTS))
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	84 30       	cpi	r24, 0x04	; 4
    1a7e:	90 f5       	brcc	.+100    	; 0x1ae4 <GPIO_writePort+0x7a>
		{
			/* Do Nothing */
		}
	else
	{
	  switch (port_num)
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3c 83       	std	Y+4, r19	; 0x04
    1a88:	2b 83       	std	Y+3, r18	; 0x03
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	91 05       	cpc	r25, r1
    1a92:	d1 f0       	breq	.+52     	; 0x1ac8 <GPIO_writePort+0x5e>
    1a94:	2b 81       	ldd	r18, Y+3	; 0x03
    1a96:	3c 81       	ldd	r19, Y+4	; 0x04
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <GPIO_writePort+0x3e>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	61 f0       	breq	.+24     	; 0x1abe <GPIO_writePort+0x54>
    1aa6:	1e c0       	rjmp	.+60     	; 0x1ae4 <GPIO_writePort+0x7a>
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	81 f0       	breq	.+32     	; 0x1ad2 <GPIO_writePort+0x68>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	91 05       	cpc	r25, r1
    1aba:	81 f0       	breq	.+32     	; 0x1adc <GPIO_writePort+0x72>
    1abc:	13 c0       	rjmp	.+38     	; 0x1ae4 <GPIO_writePort+0x7a>
	  {
	  case PORTA_ID : PORTA = value;
    1abe:	eb e3       	ldi	r30, 0x3B	; 59
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	80 83       	st	Z, r24
    1ac6:	0e c0       	rjmp	.+28     	; 0x1ae4 <GPIO_writePort+0x7a>
	  break;
	  case PORTB_ID : PORTB = value;
    1ac8:	e8 e3       	ldi	r30, 0x38	; 56
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	80 83       	st	Z, r24
    1ad0:	09 c0       	rjmp	.+18     	; 0x1ae4 <GPIO_writePort+0x7a>
	  break;
	  case PORTC_ID : PORTC = value;
    1ad2:	e5 e3       	ldi	r30, 0x35	; 53
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	80 83       	st	Z, r24
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <GPIO_writePort+0x7a>
	  break;
	  case PORTD_ID : PORTD = value;
    1adc:	e2 e3       	ldi	r30, 0x32	; 50
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	80 83       	st	Z, r24
	  break;

	  }
	}
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <GPIO_readPort+0x6>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <GPIO_readPort+0x8>
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1b00:	19 82       	std	Y+1, r1	; 0x01
	if((port_num >= NUM_OF_PORTS))
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	84 30       	cpi	r24, 0x04	; 4
    1b06:	90 f5       	brcc	.+100    	; 0x1b6c <GPIO_readPort+0x7a>
				/* Do nothing */
			}

	else
	{
		switch (port_num)
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	3c 83       	std	Y+4, r19	; 0x04
    1b10:	2b 83       	std	Y+3, r18	; 0x03
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	91 05       	cpc	r25, r1
    1b1a:	d1 f0       	breq	.+52     	; 0x1b50 <GPIO_readPort+0x5e>
    1b1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	31 05       	cpc	r19, r1
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <GPIO_readPort+0x3e>
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	61 f0       	breq	.+24     	; 0x1b46 <GPIO_readPort+0x54>
    1b2e:	1e c0       	rjmp	.+60     	; 0x1b6c <GPIO_readPort+0x7a>
    1b30:	2b 81       	ldd	r18, Y+3	; 0x03
    1b32:	3c 81       	ldd	r19, Y+4	; 0x04
    1b34:	22 30       	cpi	r18, 0x02	; 2
    1b36:	31 05       	cpc	r19, r1
    1b38:	81 f0       	breq	.+32     	; 0x1b5a <GPIO_readPort+0x68>
    1b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3e:	83 30       	cpi	r24, 0x03	; 3
    1b40:	91 05       	cpc	r25, r1
    1b42:	81 f0       	breq	.+32     	; 0x1b64 <GPIO_readPort+0x72>
    1b44:	13 c0       	rjmp	.+38     	; 0x1b6c <GPIO_readPort+0x7a>
		{
		case PORTA_ID : value = PINA;
    1b46:	e9 e3       	ldi	r30, 0x39	; 57
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	0e c0       	rjmp	.+28     	; 0x1b6c <GPIO_readPort+0x7a>
		break;
		case PORTB_ID : value = PINB;
    1b50:	e6 e3       	ldi	r30, 0x36	; 54
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	09 c0       	rjmp	.+18     	; 0x1b6c <GPIO_readPort+0x7a>
		break;
		case PORTC_ID : value = PINC;
    1b5a:	e3 e3       	ldi	r30, 0x33	; 51
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <GPIO_readPort+0x7a>
		break;
		case PORTD_ID : value = PIND;
    1b64:	e0 e3       	ldi	r30, 0x30	; 48
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	89 83       	std	Y+1, r24	; 0x01
		break;
		}
	}
  return value ;
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <PWM_Timer0_Start>:
 *5. Setup the direction for OC0 as output pin through the GPIO driver.
 *6. The generated PWM signal frequency will be 500Hz to control the DC Motor speed.
 */

void PWM_Timer0_Start(uint8 a_dutyCycle )
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	0f 92       	push	r0
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; // Set Timer Initial Value to 0
    1b88:	e2 e5       	ldi	r30, 0x52	; 82
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	10 82       	st	Z, r1

	OCR0  = a_dutyCycle ; // Set Compare Value
    1b8e:	ec e5       	ldi	r30, 0x5C	; 92
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    1b96:	a7 e3       	ldi	r26, 0x37	; 55
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	e7 e3       	ldi	r30, 0x37	; 55
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	88 60       	ori	r24, 0x08	; 8
    1ba2:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1ba4:	e3 e5       	ldi	r30, 0x53	; 83
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	8a e6       	ldi	r24, 0x6A	; 106
    1baa:	80 83       	st	Z, r24
}
    1bac:	0f 90       	pop	r0
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <__vector_9>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_OVF_vect)
{
    1bb4:	1f 92       	push	r1
    1bb6:	0f 92       	push	r0
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	0f 92       	push	r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	2f 93       	push	r18
    1bc0:	3f 93       	push	r19
    1bc2:	4f 93       	push	r20
    1bc4:	5f 93       	push	r21
    1bc6:	6f 93       	push	r22
    1bc8:	7f 93       	push	r23
    1bca:	8f 93       	push	r24
    1bcc:	9f 93       	push	r25
    1bce:	af 93       	push	r26
    1bd0:	bf 93       	push	r27
    1bd2:	ef 93       	push	r30
    1bd4:	ff 93       	push	r31
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1bde:	80 91 7e 00 	lds	r24, 0x007E
    1be2:	90 91 7f 00 	lds	r25, 0x007F
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	29 f0       	breq	.+10     	; 0x1bf4 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the OVF ISR is fired */
		(*g_callBackPtr)();
    1bea:	e0 91 7e 00 	lds	r30, 0x007E
    1bee:	f0 91 7f 00 	lds	r31, 0x007F
    1bf2:	09 95       	icall
	}
}
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	ff 91       	pop	r31
    1bfa:	ef 91       	pop	r30
    1bfc:	bf 91       	pop	r27
    1bfe:	af 91       	pop	r26
    1c00:	9f 91       	pop	r25
    1c02:	8f 91       	pop	r24
    1c04:	7f 91       	pop	r23
    1c06:	6f 91       	pop	r22
    1c08:	5f 91       	pop	r21
    1c0a:	4f 91       	pop	r20
    1c0c:	3f 91       	pop	r19
    1c0e:	2f 91       	pop	r18
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti

00001c1a <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1c1a:	1f 92       	push	r1
    1c1c:	0f 92       	push	r0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	0f 92       	push	r0
    1c22:	11 24       	eor	r1, r1
    1c24:	2f 93       	push	r18
    1c26:	3f 93       	push	r19
    1c28:	4f 93       	push	r20
    1c2a:	5f 93       	push	r21
    1c2c:	6f 93       	push	r22
    1c2e:	7f 93       	push	r23
    1c30:	8f 93       	push	r24
    1c32:	9f 93       	push	r25
    1c34:	af 93       	push	r26
    1c36:	bf 93       	push	r27
    1c38:	ef 93       	push	r30
    1c3a:	ff 93       	push	r31
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1c44:	80 91 7e 00 	lds	r24, 0x007E
    1c48:	90 91 7f 00 	lds	r25, 0x007F
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	29 f0       	breq	.+10     	; 0x1c5a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the COMPA ISR is fired */
		(*g_callBackPtr)();
    1c50:	e0 91 7e 00 	lds	r30, 0x007E
    1c54:	f0 91 7f 00 	lds	r31, 0x007F
    1c58:	09 95       	icall
	}
}
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	ff 91       	pop	r31
    1c60:	ef 91       	pop	r30
    1c62:	bf 91       	pop	r27
    1c64:	af 91       	pop	r26
    1c66:	9f 91       	pop	r25
    1c68:	8f 91       	pop	r24
    1c6a:	7f 91       	pop	r23
    1c6c:	6f 91       	pop	r22
    1c6e:	5f 91       	pop	r21
    1c70:	4f 91       	pop	r20
    1c72:	3f 91       	pop	r19
    1c74:	2f 91       	pop	r18
    1c76:	0f 90       	pop	r0
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	0f 90       	pop	r0
    1c7c:	1f 90       	pop	r1
    1c7e:	18 95       	reti

00001c80 <Timer1_init>:
 * 	3. Enable the overflow or compare A Interrupt.
 * 	4. configure timer 1 registers (TCCR1A, TCCR1B)
 * 	5. Set the required clock
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <Timer1_init+0x6>
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
    1c8a:	9a 83       	std	Y+2, r25	; 0x02
    1c8c:	89 83       	std	Y+1, r24	; 0x01
	/* Set timer1 initial count to the initial configuration */
	TCNT1 = Config_Ptr->initial_value;
    1c8e:	ac e4       	ldi	r26, 0x4C	; 76
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e9 81       	ldd	r30, Y+1	; 0x01
    1c94:	fa 81       	ldd	r31, Y+2	; 0x02
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	11 96       	adiw	r26, 0x01	; 1
    1c9c:	9c 93       	st	X, r25
    1c9e:	8e 93       	st	-X, r24

	/* Set timer1 compare value according to the configuration */
	OCR1A = Config_Ptr->compare_value;
    1ca0:	aa e4       	ldi	r26, 0x4A	; 74
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	11 96       	adiw	r26, 0x01	; 1
    1cae:	9c 93       	st	X, r25
    1cb0:	8e 93       	st	-X, r24

	/* Enable Timer1 Compare A Interrupt or Overflow Interrupt depend on mode configuration*/
	TIMSK = (TIMSK & 0xEB) | ( ((Config_Ptr->mode)<<2) & 0x14);
    1cb2:	a9 e5       	ldi	r26, 0x59	; 89
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e9 e5       	ldi	r30, 0x59	; 89
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	2b 7e       	andi	r18, 0xEB	; 235
    1cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc4:	85 81       	ldd	r24, Z+5	; 0x05
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	84 71       	andi	r24, 0x14	; 20
    1cd4:	82 2b       	or	r24, r18
    1cd6:	8c 93       	st	X, r24
	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=1 (Non-PWM)
	 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4 or Mode Number 0)
	 */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1cd8:	ef e4       	ldi	r30, 0x4F	; 79
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8c e0       	ldi	r24, 0x0C	; 12
    1cde:	80 83       	st	Z, r24

	/* Configure timer control register TCCR1B
	 * 1. Mode configured to be mode number 0(Normal) or mode number 4 (CTC)
	 * 2. Pre-scaler = depend on the pre-scaler configuration
	 */
	TCCR1B = (TCCR1B & 0xF7) | ( ((Config_Ptr->mode)<<1) & 0x08);
    1ce0:	ae e4       	ldi	r26, 0x4E	; 78
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	ee e4       	ldi	r30, 0x4E	; 78
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	28 2f       	mov	r18, r24
    1cec:	27 7f       	andi	r18, 0xF7	; 247
    1cee:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf2:	85 81       	ldd	r24, Z+5	; 0x05
    1cf4:	88 2f       	mov	r24, r24
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	88 0f       	add	r24, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	88 70       	andi	r24, 0x08	; 8
    1cfe:	82 2b       	or	r24, r18
    1d00:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | ( (Config_Ptr->prescaler) & 0x07);
    1d02:	ae e4       	ldi	r26, 0x4E	; 78
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	ee e4       	ldi	r30, 0x4E	; 78
    1d08:	f0 e0       	ldi	r31, 0x00	; 0
    1d0a:	80 81       	ld	r24, Z
    1d0c:	98 2f       	mov	r25, r24
    1d0e:	98 7f       	andi	r25, 0xF8	; 248
    1d10:	e9 81       	ldd	r30, Y+1	; 0x01
    1d12:	fa 81       	ldd	r31, Y+2	; 0x02
    1d14:	84 81       	ldd	r24, Z+4	; 0x04
    1d16:	87 70       	andi	r24, 0x07	; 7
    1d18:	89 2b       	or	r24, r25
    1d1a:	8c 93       	st	X, r24
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <Timer1_deInit>:

/*
 * Description: Function to disable the Timer1
 */
void Timer1_deInit(void)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
	/* Clear all timer registers */
	TCCR1A	= 0;
    1d2e:	ef e4       	ldi	r30, 0x4F	; 79
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	10 82       	st	Z, r1
	TCCR1B	= 0;
    1d34:	ee e4       	ldi	r30, 0x4E	; 78
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	10 82       	st	Z, r1
	TCNT1	= 0;
    1d3a:	ec e4       	ldi	r30, 0x4C	; 76
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	11 82       	std	Z+1, r1	; 0x01
    1d40:	10 82       	st	Z, r1
	OCR1A	= 0;
    1d42:	ea e4       	ldi	r30, 0x4A	; 74
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	11 82       	std	Z+1, r1	; 0x01
    1d48:	10 82       	st	Z, r1

	/* disable Timer1 Compare A Interrupt or Overflow Interrupt depend on mode configuration */
	TIMSK &= 0xCF;
    1d4a:	a9 e5       	ldi	r26, 0x59	; 89
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e9 e5       	ldi	r30, 0x59	; 89
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	8f 7c       	andi	r24, 0xCF	; 207
    1d56:	8c 93       	st	X, r24
}
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <Timer1_setCallBack>:
 * Description: Function to set the Call Back function address.
 */


void Timer1_setCallBack(void(*a_ptr)(void))
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <Timer1_setCallBack+0x6>
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	9a 83       	std	Y+2, r25	; 0x02
    1d6a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d70:	90 93 7f 00 	sts	0x007F, r25
    1d74:	80 93 7e 00 	sts	0x007E, r24
}
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <TWI_init+0x6>
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	9a 83       	std	Y+2, r25	; 0x02
    1d8e:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: depend on user choice using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr -> bit_rate;
    1d90:	a0 e2       	ldi	r26, 0x20	; 32
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e9 81       	ldd	r30, Y+1	; 0x01
    1d96:	fa 81       	ldd	r31, Y+2	; 0x02
    1d98:	81 81       	ldd	r24, Z+1	; 0x01
    1d9a:	8c 93       	st	X, r24
	TWSR = 0x00;
    1d9c:	e1 e2       	ldi	r30, 0x21	; 33
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1
     * (used in case this MC is a slave device)
     * General Call Recognition: Off */
    TWAR = ((Config_Ptr-> address)<<1) & 0xFE;
    1da2:	a2 e2       	ldi	r26, 0x22	; 34
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e9 81       	ldd	r30, Y+1	; 0x01
    1da8:	fa 81       	ldd	r31, Y+2	; 0x02
    1daa:	80 81       	ld	r24, Z
    1dac:	88 2f       	mov	r24, r24
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1db6:	e6 e5       	ldi	r30, 0x56	; 86
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	84 e0       	ldi	r24, 0x04	; 4
    1dbc:	80 83       	st	Z, r24
}
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <TWI_start>:

void TWI_start(void)
{
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1dd0:	e6 e5       	ldi	r30, 0x56	; 86
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	84 ea       	ldi	r24, 0xA4	; 164
    1dd6:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1dd8:	e6 e5       	ldi	r30, 0x56	; 86
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	88 23       	and	r24, r24
    1de0:	dc f7       	brge	.-10     	; 0x1dd8 <TWI_start+0x10>
}
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <TWI_stop>:

void TWI_stop(void)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1df0:	e6 e5       	ldi	r30, 0x56	; 86
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	84 e9       	ldi	r24, 0x94	; 148
    1df6:	80 83       	st	Z, r24
}
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	0f 92       	push	r0
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1e0a:	e3 e2       	ldi	r30, 0x23	; 35
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e12:	e6 e5       	ldi	r30, 0x56	; 86
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	84 e8       	ldi	r24, 0x84	; 132
    1e18:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e1a:	e6 e5       	ldi	r30, 0x56	; 86
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	88 23       	and	r24, r24
    1e22:	dc f7       	brge	.-10     	; 0x1e1a <TWI_writeByte+0x1c>
}
    1e24:	0f 90       	pop	r0
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1e34:	e6 e5       	ldi	r30, 0x56	; 86
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	84 ec       	ldi	r24, 0xC4	; 196
    1e3a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e3c:	e6 e5       	ldi	r30, 0x56	; 86
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	88 23       	and	r24, r24
    1e44:	dc f7       	brge	.-10     	; 0x1e3c <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1e46:	e3 e2       	ldi	r30, 0x23	; 35
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
}
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e5a:	e6 e5       	ldi	r30, 0x56	; 86
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	84 e8       	ldi	r24, 0x84	; 132
    1e60:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e62:	e6 e5       	ldi	r30, 0x56	; 86
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	88 23       	and	r24, r24
    1e6a:	dc f7       	brge	.-10     	; 0x1e62 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1e6c:	e3 e2       	ldi	r30, 0x23	; 35
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
}
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	08 95       	ret

00001e78 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1e78:	df 93       	push	r29
    1e7a:	cf 93       	push	r28
    1e7c:	0f 92       	push	r0
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1e82:	e1 e2       	ldi	r30, 0x21	; 33
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	88 7f       	andi	r24, 0xF8	; 248
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1e8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e8e:	0f 90       	pop	r0
    1e90:	cf 91       	pop	r28
    1e92:	df 91       	pop	r29
    1e94:	08 95       	ret

00001e96 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    1e96:	df 93       	push	r29
    1e98:	cf 93       	push	r28
    1e9a:	00 d0       	rcall	.+0      	; 0x1e9c <UART_init+0x6>
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <UART_init+0x8>
    1e9e:	cd b7       	in	r28, 0x3d	; 61
    1ea0:	de b7       	in	r29, 0x3e	; 62
    1ea2:	9c 83       	std	Y+4, r25	; 0x04
    1ea4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1ea6:	1a 82       	std	Y+2, r1	; 0x02
    1ea8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1eaa:	eb e2       	ldi	r30, 0x2B	; 43
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	82 e0       	ldi	r24, 0x02	; 2
    1eb0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1eb2:	ea e2       	ldi	r30, 0x2A	; 42
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	88 e1       	ldi	r24, 0x18	; 24
    1eb8:	80 83       	st	Z, r24
	 * UPM1:0  = depend on the parity mode configuration
	 * USBS    = depend on the stop bits configuration
	 * UCSZ1:0 = depend on the character size configuration
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL) ;
    1eba:	a0 e4       	ldi	r26, 0x40	; 64
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e0 e4       	ldi	r30, 0x40	; 64
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	80 68       	ori	r24, 0x80	; 128
    1ec6:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ( (Config_Ptr->parity)<<4 );
    1ec8:	a0 e4       	ldi	r26, 0x40	; 64
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e0 e4       	ldi	r30, 0x40	; 64
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	2f 7c       	andi	r18, 0xCF	; 207
    1ed6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ed8:	fc 81       	ldd	r31, Y+4	; 0x04
    1eda:	81 81       	ldd	r24, Z+1	; 0x01
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	82 95       	swap	r24
    1ee2:	92 95       	swap	r25
    1ee4:	90 7f       	andi	r25, 0xF0	; 240
    1ee6:	98 27       	eor	r25, r24
    1ee8:	80 7f       	andi	r24, 0xF0	; 240
    1eea:	98 27       	eor	r25, r24
    1eec:	82 2b       	or	r24, r18
    1eee:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ( (Config_Ptr->stop_bit)<< 3);
    1ef0:	a0 e4       	ldi	r26, 0x40	; 64
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e0 e4       	ldi	r30, 0x40	; 64
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	28 2f       	mov	r18, r24
    1efc:	27 7f       	andi	r18, 0xF7	; 247
    1efe:	eb 81       	ldd	r30, Y+3	; 0x03
    1f00:	fc 81       	ldd	r31, Y+4	; 0x04
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	82 2b       	or	r24, r18
    1f16:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ( ((Config_Ptr->bit_data)<< 1) & 0x06);
    1f18:	a0 e4       	ldi	r26, 0x40	; 64
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e0 e4       	ldi	r30, 0x40	; 64
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	28 2f       	mov	r18, r24
    1f24:	29 7f       	andi	r18, 0xF9	; 249
    1f26:	eb 81       	ldd	r30, Y+3	; 0x03
    1f28:	fc 81       	ldd	r31, Y+4	; 0x04
    1f2a:	80 81       	ld	r24, Z
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	86 70       	andi	r24, 0x06	; 6
    1f36:	82 2b       	or	r24, r18
    1f38:	8c 93       	st	X, r24
	UCSRB = (UCSRB & 0xFB) | ( (Config_Ptr->bit_data) & 0x04);
    1f3a:	aa e2       	ldi	r26, 0x2A	; 42
    1f3c:	b0 e0       	ldi	r27, 0x00	; 0
    1f3e:	ea e2       	ldi	r30, 0x2A	; 42
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	98 2f       	mov	r25, r24
    1f46:	9b 7f       	andi	r25, 0xFB	; 251
    1f48:	eb 81       	ldd	r30, Y+3	; 0x03
    1f4a:	fc 81       	ldd	r31, Y+4	; 0x04
    1f4c:	80 81       	ld	r24, Z
    1f4e:	84 70       	andi	r24, 0x04	; 4
    1f50:	89 2b       	or	r24, r25
    1f52:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    1f54:	eb 81       	ldd	r30, Y+3	; 0x03
    1f56:	fc 81       	ldd	r31, Y+4	; 0x04
    1f58:	83 81       	ldd	r24, Z+3	; 0x03
    1f5a:	94 81       	ldd	r25, Z+4	; 0x04
    1f5c:	a5 81       	ldd	r26, Z+5	; 0x05
    1f5e:	b6 81       	ldd	r27, Z+6	; 0x06
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	aa 1f       	adc	r26, r26
    1f66:	bb 1f       	adc	r27, r27
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	aa 1f       	adc	r26, r26
    1f6e:	bb 1f       	adc	r27, r27
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	aa 1f       	adc	r26, r26
    1f76:	bb 1f       	adc	r27, r27
    1f78:	9c 01       	movw	r18, r24
    1f7a:	ad 01       	movw	r20, r26
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	92 e1       	ldi	r25, 0x12	; 18
    1f80:	aa e7       	ldi	r26, 0x7A	; 122
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 6f 10 	call	0x20de	; 0x20de <__udivmodsi4>
    1f8c:	da 01       	movw	r26, r20
    1f8e:	c9 01       	movw	r24, r18
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	9a 83       	std	Y+2, r25	; 0x02
    1f94:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1f96:	e0 e4       	ldi	r30, 0x40	; 64
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	89 2f       	mov	r24, r25
    1fa0:	99 27       	eor	r25, r25
    1fa2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1fa4:	e9 e2       	ldi	r30, 0x29	; 41
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	80 83       	st	Z, r24
}
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	0f 92       	push	r0
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1fc6:	eb e2       	ldi	r30, 0x2B	; 43
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	88 2f       	mov	r24, r24
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	80 72       	andi	r24, 0x20	; 32
    1fd2:	90 70       	andi	r25, 0x00	; 0
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	b9 f3       	breq	.-18     	; 0x1fc6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1fd8:	ec e2       	ldi	r30, 0x2C	; 44
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1fe0:	0f 90       	pop	r0
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1ff0:	eb e2       	ldi	r30, 0x2B	; 43
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	80 81       	ld	r24, Z
    1ff6:	88 23       	and	r24, r24
    1ff8:	dc f7       	brge	.-10     	; 0x1ff0 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1ffa:	ec e2       	ldi	r30, 0x2C	; 44
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
}
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <UART_sendString+0x6>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9b 83       	std	Y+3, r25	; 0x03
    2014:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2016:	19 82       	std	Y+1, r1	; 0x01
    2018:	0e c0       	rjmp	.+28     	; 0x2036 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	9b 81       	ldd	r25, Y+3	; 0x03
    2024:	fc 01       	movw	r30, r24
    2026:	e2 0f       	add	r30, r18
    2028:	f3 1f       	adc	r31, r19
    202a:	80 81       	ld	r24, Z
    202c:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <UART_sendByte>
		i++;
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	fc 01       	movw	r30, r24
    2042:	e2 0f       	add	r30, r18
    2044:	f3 1f       	adc	r31, r19
    2046:	80 81       	ld	r24, Z
    2048:	88 23       	and	r24, r24
    204a:	39 f7       	brne	.-50     	; 0x201a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	00 d0       	rcall	.+0      	; 0x2062 <UART_receiveString+0xa>
    2062:	0f 92       	push	r0
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	9b 83       	std	Y+3, r25	; 0x03
    206a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    206c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	9b 81       	ldd	r25, Y+3	; 0x03
    2078:	8c 01       	movw	r16, r24
    207a:	02 0f       	add	r16, r18
    207c:	13 1f       	adc	r17, r19
    207e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <UART_receiveByte>
    2082:	f8 01       	movw	r30, r16
    2084:	80 83       	st	Z, r24
    2086:	0f c0       	rjmp	.+30     	; 0x20a6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	8f 5f       	subi	r24, 0xFF	; 255
    208c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	9b 81       	ldd	r25, Y+3	; 0x03
    2098:	8c 01       	movw	r16, r24
    209a:	02 0f       	add	r16, r18
    209c:	13 1f       	adc	r17, r19
    209e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <UART_receiveByte>
    20a2:	f8 01       	movw	r30, r16
    20a4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	28 2f       	mov	r18, r24
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	9b 81       	ldd	r25, Y+3	; 0x03
    20b0:	fc 01       	movw	r30, r24
    20b2:	e2 0f       	add	r30, r18
    20b4:	f3 1f       	adc	r31, r19
    20b6:	80 81       	ld	r24, Z
    20b8:	83 32       	cpi	r24, 0x23	; 35
    20ba:	31 f7       	brne	.-52     	; 0x2088 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	8a 81       	ldd	r24, Y+2	; 0x02
    20c4:	9b 81       	ldd	r25, Y+3	; 0x03
    20c6:	fc 01       	movw	r30, r24
    20c8:	e2 0f       	add	r30, r18
    20ca:	f3 1f       	adc	r31, r19
    20cc:	10 82       	st	Z, r1
}
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	08 95       	ret

000020de <__udivmodsi4>:
    20de:	a1 e2       	ldi	r26, 0x21	; 33
    20e0:	1a 2e       	mov	r1, r26
    20e2:	aa 1b       	sub	r26, r26
    20e4:	bb 1b       	sub	r27, r27
    20e6:	fd 01       	movw	r30, r26
    20e8:	0d c0       	rjmp	.+26     	; 0x2104 <__udivmodsi4_ep>

000020ea <__udivmodsi4_loop>:
    20ea:	aa 1f       	adc	r26, r26
    20ec:	bb 1f       	adc	r27, r27
    20ee:	ee 1f       	adc	r30, r30
    20f0:	ff 1f       	adc	r31, r31
    20f2:	a2 17       	cp	r26, r18
    20f4:	b3 07       	cpc	r27, r19
    20f6:	e4 07       	cpc	r30, r20
    20f8:	f5 07       	cpc	r31, r21
    20fa:	20 f0       	brcs	.+8      	; 0x2104 <__udivmodsi4_ep>
    20fc:	a2 1b       	sub	r26, r18
    20fe:	b3 0b       	sbc	r27, r19
    2100:	e4 0b       	sbc	r30, r20
    2102:	f5 0b       	sbc	r31, r21

00002104 <__udivmodsi4_ep>:
    2104:	66 1f       	adc	r22, r22
    2106:	77 1f       	adc	r23, r23
    2108:	88 1f       	adc	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	1a 94       	dec	r1
    210e:	69 f7       	brne	.-38     	; 0x20ea <__udivmodsi4_loop>
    2110:	60 95       	com	r22
    2112:	70 95       	com	r23
    2114:	80 95       	com	r24
    2116:	90 95       	com	r25
    2118:	9b 01       	movw	r18, r22
    211a:	ac 01       	movw	r20, r24
    211c:	bd 01       	movw	r22, r26
    211e:	cf 01       	movw	r24, r30
    2120:	08 95       	ret

00002122 <__prologue_saves__>:
    2122:	2f 92       	push	r2
    2124:	3f 92       	push	r3
    2126:	4f 92       	push	r4
    2128:	5f 92       	push	r5
    212a:	6f 92       	push	r6
    212c:	7f 92       	push	r7
    212e:	8f 92       	push	r8
    2130:	9f 92       	push	r9
    2132:	af 92       	push	r10
    2134:	bf 92       	push	r11
    2136:	cf 92       	push	r12
    2138:	df 92       	push	r13
    213a:	ef 92       	push	r14
    213c:	ff 92       	push	r15
    213e:	0f 93       	push	r16
    2140:	1f 93       	push	r17
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	ca 1b       	sub	r28, r26
    214c:	db 0b       	sbc	r29, r27
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	f8 94       	cli
    2152:	de bf       	out	0x3e, r29	; 62
    2154:	0f be       	out	0x3f, r0	; 63
    2156:	cd bf       	out	0x3d, r28	; 61
    2158:	09 94       	ijmp

0000215a <__epilogue_restores__>:
    215a:	2a 88       	ldd	r2, Y+18	; 0x12
    215c:	39 88       	ldd	r3, Y+17	; 0x11
    215e:	48 88       	ldd	r4, Y+16	; 0x10
    2160:	5f 84       	ldd	r5, Y+15	; 0x0f
    2162:	6e 84       	ldd	r6, Y+14	; 0x0e
    2164:	7d 84       	ldd	r7, Y+13	; 0x0d
    2166:	8c 84       	ldd	r8, Y+12	; 0x0c
    2168:	9b 84       	ldd	r9, Y+11	; 0x0b
    216a:	aa 84       	ldd	r10, Y+10	; 0x0a
    216c:	b9 84       	ldd	r11, Y+9	; 0x09
    216e:	c8 84       	ldd	r12, Y+8	; 0x08
    2170:	df 80       	ldd	r13, Y+7	; 0x07
    2172:	ee 80       	ldd	r14, Y+6	; 0x06
    2174:	fd 80       	ldd	r15, Y+5	; 0x05
    2176:	0c 81       	ldd	r16, Y+4	; 0x04
    2178:	1b 81       	ldd	r17, Y+3	; 0x03
    217a:	aa 81       	ldd	r26, Y+2	; 0x02
    217c:	b9 81       	ldd	r27, Y+1	; 0x01
    217e:	ce 0f       	add	r28, r30
    2180:	d1 1d       	adc	r29, r1
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	ed 01       	movw	r28, r26
    218e:	08 95       	ret

00002190 <_exit>:
    2190:	f8 94       	cli

00002192 <__stop_program>:
    2192:	ff cf       	rjmp	.-2      	; 0x2192 <__stop_program>
